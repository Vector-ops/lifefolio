// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/vector-ops/lifefolio/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/vector-ops/lifefolio/ent/institution"
	"github.com/vector-ops/lifefolio/ent/medicalrecord"
	"github.com/vector-ops/lifefolio/ent/recordaccess"
	"github.com/vector-ops/lifefolio/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Institution is the client for interacting with the Institution builders.
	Institution *InstitutionClient
	// MedicalRecord is the client for interacting with the MedicalRecord builders.
	MedicalRecord *MedicalRecordClient
	// RecordAccess is the client for interacting with the RecordAccess builders.
	RecordAccess *RecordAccessClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Institution = NewInstitutionClient(c.config)
	c.MedicalRecord = NewMedicalRecordClient(c.config)
	c.RecordAccess = NewRecordAccessClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Institution:   NewInstitutionClient(cfg),
		MedicalRecord: NewMedicalRecordClient(cfg),
		RecordAccess:  NewRecordAccessClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Institution:   NewInstitutionClient(cfg),
		MedicalRecord: NewMedicalRecordClient(cfg),
		RecordAccess:  NewRecordAccessClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Institution.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Institution.Use(hooks...)
	c.MedicalRecord.Use(hooks...)
	c.RecordAccess.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Institution.Intercept(interceptors...)
	c.MedicalRecord.Intercept(interceptors...)
	c.RecordAccess.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *InstitutionMutation:
		return c.Institution.mutate(ctx, m)
	case *MedicalRecordMutation:
		return c.MedicalRecord.mutate(ctx, m)
	case *RecordAccessMutation:
		return c.RecordAccess.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// InstitutionClient is a client for the Institution schema.
type InstitutionClient struct {
	config
}

// NewInstitutionClient returns a client for the Institution from the given config.
func NewInstitutionClient(c config) *InstitutionClient {
	return &InstitutionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `institution.Hooks(f(g(h())))`.
func (c *InstitutionClient) Use(hooks ...Hook) {
	c.hooks.Institution = append(c.hooks.Institution, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `institution.Intercept(f(g(h())))`.
func (c *InstitutionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Institution = append(c.inters.Institution, interceptors...)
}

// Create returns a builder for creating a Institution entity.
func (c *InstitutionClient) Create() *InstitutionCreate {
	mutation := newInstitutionMutation(c.config, OpCreate)
	return &InstitutionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Institution entities.
func (c *InstitutionClient) CreateBulk(builders ...*InstitutionCreate) *InstitutionCreateBulk {
	return &InstitutionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InstitutionClient) MapCreateBulk(slice any, setFunc func(*InstitutionCreate, int)) *InstitutionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InstitutionCreateBulk{err: fmt.Errorf("calling to InstitutionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InstitutionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InstitutionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Institution.
func (c *InstitutionClient) Update() *InstitutionUpdate {
	mutation := newInstitutionMutation(c.config, OpUpdate)
	return &InstitutionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InstitutionClient) UpdateOne(i *Institution) *InstitutionUpdateOne {
	mutation := newInstitutionMutation(c.config, OpUpdateOne, withInstitution(i))
	return &InstitutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InstitutionClient) UpdateOneID(id uuid.UUID) *InstitutionUpdateOne {
	mutation := newInstitutionMutation(c.config, OpUpdateOne, withInstitutionID(id))
	return &InstitutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Institution.
func (c *InstitutionClient) Delete() *InstitutionDelete {
	mutation := newInstitutionMutation(c.config, OpDelete)
	return &InstitutionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InstitutionClient) DeleteOne(i *Institution) *InstitutionDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InstitutionClient) DeleteOneID(id uuid.UUID) *InstitutionDeleteOne {
	builder := c.Delete().Where(institution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InstitutionDeleteOne{builder}
}

// Query returns a query builder for Institution.
func (c *InstitutionClient) Query() *InstitutionQuery {
	return &InstitutionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInstitution},
		inters: c.Interceptors(),
	}
}

// Get returns a Institution entity by its id.
func (c *InstitutionClient) Get(ctx context.Context, id uuid.UUID) (*Institution, error) {
	return c.Query().Where(institution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InstitutionClient) GetX(ctx context.Context, id uuid.UUID) *Institution {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRecordaccess queries the recordaccess edge of a Institution.
func (c *InstitutionClient) QueryRecordaccess(i *Institution) *RecordAccessQuery {
	query := (&RecordAccessClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(institution.Table, institution.FieldID, id),
			sqlgraph.To(recordaccess.Table, recordaccess.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, institution.RecordaccessTable, institution.RecordaccessColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDoctor queries the doctor edge of a Institution.
func (c *InstitutionClient) QueryDoctor(i *Institution) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(institution.Table, institution.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, institution.DoctorTable, institution.DoctorColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMedicalrecord queries the medicalrecord edge of a Institution.
func (c *InstitutionClient) QueryMedicalrecord(i *Institution) *MedicalRecordQuery {
	query := (&MedicalRecordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(institution.Table, institution.FieldID, id),
			sqlgraph.To(medicalrecord.Table, medicalrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, institution.MedicalrecordTable, institution.MedicalrecordColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InstitutionClient) Hooks() []Hook {
	return c.hooks.Institution
}

// Interceptors returns the client interceptors.
func (c *InstitutionClient) Interceptors() []Interceptor {
	return c.inters.Institution
}

func (c *InstitutionClient) mutate(ctx context.Context, m *InstitutionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InstitutionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InstitutionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InstitutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InstitutionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Institution mutation op: %q", m.Op())
	}
}

// MedicalRecordClient is a client for the MedicalRecord schema.
type MedicalRecordClient struct {
	config
}

// NewMedicalRecordClient returns a client for the MedicalRecord from the given config.
func NewMedicalRecordClient(c config) *MedicalRecordClient {
	return &MedicalRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `medicalrecord.Hooks(f(g(h())))`.
func (c *MedicalRecordClient) Use(hooks ...Hook) {
	c.hooks.MedicalRecord = append(c.hooks.MedicalRecord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `medicalrecord.Intercept(f(g(h())))`.
func (c *MedicalRecordClient) Intercept(interceptors ...Interceptor) {
	c.inters.MedicalRecord = append(c.inters.MedicalRecord, interceptors...)
}

// Create returns a builder for creating a MedicalRecord entity.
func (c *MedicalRecordClient) Create() *MedicalRecordCreate {
	mutation := newMedicalRecordMutation(c.config, OpCreate)
	return &MedicalRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MedicalRecord entities.
func (c *MedicalRecordClient) CreateBulk(builders ...*MedicalRecordCreate) *MedicalRecordCreateBulk {
	return &MedicalRecordCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MedicalRecordClient) MapCreateBulk(slice any, setFunc func(*MedicalRecordCreate, int)) *MedicalRecordCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MedicalRecordCreateBulk{err: fmt.Errorf("calling to MedicalRecordClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MedicalRecordCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MedicalRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MedicalRecord.
func (c *MedicalRecordClient) Update() *MedicalRecordUpdate {
	mutation := newMedicalRecordMutation(c.config, OpUpdate)
	return &MedicalRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MedicalRecordClient) UpdateOne(mr *MedicalRecord) *MedicalRecordUpdateOne {
	mutation := newMedicalRecordMutation(c.config, OpUpdateOne, withMedicalRecord(mr))
	return &MedicalRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MedicalRecordClient) UpdateOneID(id uuid.UUID) *MedicalRecordUpdateOne {
	mutation := newMedicalRecordMutation(c.config, OpUpdateOne, withMedicalRecordID(id))
	return &MedicalRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MedicalRecord.
func (c *MedicalRecordClient) Delete() *MedicalRecordDelete {
	mutation := newMedicalRecordMutation(c.config, OpDelete)
	return &MedicalRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MedicalRecordClient) DeleteOne(mr *MedicalRecord) *MedicalRecordDeleteOne {
	return c.DeleteOneID(mr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MedicalRecordClient) DeleteOneID(id uuid.UUID) *MedicalRecordDeleteOne {
	builder := c.Delete().Where(medicalrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MedicalRecordDeleteOne{builder}
}

// Query returns a query builder for MedicalRecord.
func (c *MedicalRecordClient) Query() *MedicalRecordQuery {
	return &MedicalRecordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMedicalRecord},
		inters: c.Interceptors(),
	}
}

// Get returns a MedicalRecord entity by its id.
func (c *MedicalRecordClient) Get(ctx context.Context, id uuid.UUID) (*MedicalRecord, error) {
	return c.Query().Where(medicalrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MedicalRecordClient) GetX(ctx context.Context, id uuid.UUID) *MedicalRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a MedicalRecord.
func (c *MedicalRecordClient) QueryUser(mr *MedicalRecord) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(medicalrecord.Table, medicalrecord.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, medicalrecord.UserTable, medicalrecord.UserColumn),
		)
		fromV = sqlgraph.Neighbors(mr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInstitution queries the institution edge of a MedicalRecord.
func (c *MedicalRecordClient) QueryInstitution(mr *MedicalRecord) *InstitutionQuery {
	query := (&InstitutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(medicalrecord.Table, medicalrecord.FieldID, id),
			sqlgraph.To(institution.Table, institution.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, medicalrecord.InstitutionTable, medicalrecord.InstitutionColumn),
		)
		fromV = sqlgraph.Neighbors(mr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRecordaccess queries the recordaccess edge of a MedicalRecord.
func (c *MedicalRecordClient) QueryRecordaccess(mr *MedicalRecord) *RecordAccessQuery {
	query := (&RecordAccessClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(medicalrecord.Table, medicalrecord.FieldID, id),
			sqlgraph.To(recordaccess.Table, recordaccess.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, medicalrecord.RecordaccessTable, medicalrecord.RecordaccessColumn),
		)
		fromV = sqlgraph.Neighbors(mr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MedicalRecordClient) Hooks() []Hook {
	return c.hooks.MedicalRecord
}

// Interceptors returns the client interceptors.
func (c *MedicalRecordClient) Interceptors() []Interceptor {
	return c.inters.MedicalRecord
}

func (c *MedicalRecordClient) mutate(ctx context.Context, m *MedicalRecordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MedicalRecordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MedicalRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MedicalRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MedicalRecordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MedicalRecord mutation op: %q", m.Op())
	}
}

// RecordAccessClient is a client for the RecordAccess schema.
type RecordAccessClient struct {
	config
}

// NewRecordAccessClient returns a client for the RecordAccess from the given config.
func NewRecordAccessClient(c config) *RecordAccessClient {
	return &RecordAccessClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recordaccess.Hooks(f(g(h())))`.
func (c *RecordAccessClient) Use(hooks ...Hook) {
	c.hooks.RecordAccess = append(c.hooks.RecordAccess, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `recordaccess.Intercept(f(g(h())))`.
func (c *RecordAccessClient) Intercept(interceptors ...Interceptor) {
	c.inters.RecordAccess = append(c.inters.RecordAccess, interceptors...)
}

// Create returns a builder for creating a RecordAccess entity.
func (c *RecordAccessClient) Create() *RecordAccessCreate {
	mutation := newRecordAccessMutation(c.config, OpCreate)
	return &RecordAccessCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RecordAccess entities.
func (c *RecordAccessClient) CreateBulk(builders ...*RecordAccessCreate) *RecordAccessCreateBulk {
	return &RecordAccessCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RecordAccessClient) MapCreateBulk(slice any, setFunc func(*RecordAccessCreate, int)) *RecordAccessCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RecordAccessCreateBulk{err: fmt.Errorf("calling to RecordAccessClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RecordAccessCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RecordAccessCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RecordAccess.
func (c *RecordAccessClient) Update() *RecordAccessUpdate {
	mutation := newRecordAccessMutation(c.config, OpUpdate)
	return &RecordAccessUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecordAccessClient) UpdateOne(ra *RecordAccess) *RecordAccessUpdateOne {
	mutation := newRecordAccessMutation(c.config, OpUpdateOne, withRecordAccess(ra))
	return &RecordAccessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecordAccessClient) UpdateOneID(id uuid.UUID) *RecordAccessUpdateOne {
	mutation := newRecordAccessMutation(c.config, OpUpdateOne, withRecordAccessID(id))
	return &RecordAccessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RecordAccess.
func (c *RecordAccessClient) Delete() *RecordAccessDelete {
	mutation := newRecordAccessMutation(c.config, OpDelete)
	return &RecordAccessDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RecordAccessClient) DeleteOne(ra *RecordAccess) *RecordAccessDeleteOne {
	return c.DeleteOneID(ra.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RecordAccessClient) DeleteOneID(id uuid.UUID) *RecordAccessDeleteOne {
	builder := c.Delete().Where(recordaccess.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecordAccessDeleteOne{builder}
}

// Query returns a query builder for RecordAccess.
func (c *RecordAccessClient) Query() *RecordAccessQuery {
	return &RecordAccessQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRecordAccess},
		inters: c.Interceptors(),
	}
}

// Get returns a RecordAccess entity by its id.
func (c *RecordAccessClient) Get(ctx context.Context, id uuid.UUID) (*RecordAccess, error) {
	return c.Query().Where(recordaccess.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecordAccessClient) GetX(ctx context.Context, id uuid.UUID) *RecordAccess {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMedicalrecord queries the medicalrecord edge of a RecordAccess.
func (c *RecordAccessClient) QueryMedicalrecord(ra *RecordAccess) *MedicalRecordQuery {
	query := (&MedicalRecordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ra.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recordaccess.Table, recordaccess.FieldID, id),
			sqlgraph.To(medicalrecord.Table, medicalrecord.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recordaccess.MedicalrecordTable, recordaccess.MedicalrecordColumn),
		)
		fromV = sqlgraph.Neighbors(ra.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInstitution queries the institution edge of a RecordAccess.
func (c *RecordAccessClient) QueryInstitution(ra *RecordAccess) *InstitutionQuery {
	query := (&InstitutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ra.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recordaccess.Table, recordaccess.FieldID, id),
			sqlgraph.To(institution.Table, institution.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recordaccess.InstitutionTable, recordaccess.InstitutionColumn),
		)
		fromV = sqlgraph.Neighbors(ra.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecordAccessClient) Hooks() []Hook {
	return c.hooks.RecordAccess
}

// Interceptors returns the client interceptors.
func (c *RecordAccessClient) Interceptors() []Interceptor {
	return c.inters.RecordAccess
}

func (c *RecordAccessClient) mutate(ctx context.Context, m *RecordAccessMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RecordAccessCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RecordAccessUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RecordAccessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RecordAccessDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RecordAccess mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMedicalrecord queries the medicalrecord edge of a User.
func (c *UserClient) QueryMedicalrecord(u *User) *MedicalRecordQuery {
	query := (&MedicalRecordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(medicalrecord.Table, medicalrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MedicalrecordTable, user.MedicalrecordColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInstitution queries the institution edge of a User.
func (c *UserClient) QueryInstitution(u *User) *InstitutionQuery {
	query := (&InstitutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(institution.Table, institution.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.InstitutionTable, user.InstitutionColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Institution, MedicalRecord, RecordAccess, User []ent.Hook
	}
	inters struct {
		Institution, MedicalRecord, RecordAccess, User []ent.Interceptor
	}
)
