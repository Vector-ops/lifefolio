// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/vector-ops/lifefolio/ent/institution"
	"github.com/vector-ops/lifefolio/ent/medicalrecord"
	"github.com/vector-ops/lifefolio/ent/recordaccess"
	"github.com/vector-ops/lifefolio/ent/user"
)

// InstitutionCreate is the builder for creating a Institution entity.
type InstitutionCreate struct {
	config
	mutation *InstitutionMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ic *InstitutionCreate) SetName(s string) *InstitutionCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetDescription sets the "description" field.
func (ic *InstitutionCreate) SetDescription(s string) *InstitutionCreate {
	ic.mutation.SetDescription(s)
	return ic
}

// SetLocation sets the "location" field.
func (ic *InstitutionCreate) SetLocation(s string) *InstitutionCreate {
	ic.mutation.SetLocation(s)
	return ic
}

// SetEmail sets the "email" field.
func (ic *InstitutionCreate) SetEmail(s string) *InstitutionCreate {
	ic.mutation.SetEmail(s)
	return ic
}

// SetPassword sets the "password" field.
func (ic *InstitutionCreate) SetPassword(s string) *InstitutionCreate {
	ic.mutation.SetPassword(s)
	return ic
}

// SetPhone sets the "phone" field.
func (ic *InstitutionCreate) SetPhone(s string) *InstitutionCreate {
	ic.mutation.SetPhone(s)
	return ic
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (ic *InstitutionCreate) SetNillablePhone(s *string) *InstitutionCreate {
	if s != nil {
		ic.SetPhone(*s)
	}
	return ic
}

// SetIsArchived sets the "is_archived" field.
func (ic *InstitutionCreate) SetIsArchived(b bool) *InstitutionCreate {
	ic.mutation.SetIsArchived(b)
	return ic
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (ic *InstitutionCreate) SetNillableIsArchived(b *bool) *InstitutionCreate {
	if b != nil {
		ic.SetIsArchived(*b)
	}
	return ic
}

// SetIsVerified sets the "is_verified" field.
func (ic *InstitutionCreate) SetIsVerified(b bool) *InstitutionCreate {
	ic.mutation.SetIsVerified(b)
	return ic
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (ic *InstitutionCreate) SetNillableIsVerified(b *bool) *InstitutionCreate {
	if b != nil {
		ic.SetIsVerified(*b)
	}
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *InstitutionCreate) SetCreatedAt(t time.Time) *InstitutionCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *InstitutionCreate) SetNillableCreatedAt(t *time.Time) *InstitutionCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *InstitutionCreate) SetUpdatedAt(t time.Time) *InstitutionCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *InstitutionCreate) SetNillableUpdatedAt(t *time.Time) *InstitutionCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetArchivedAt sets the "archived_at" field.
func (ic *InstitutionCreate) SetArchivedAt(t time.Time) *InstitutionCreate {
	ic.mutation.SetArchivedAt(t)
	return ic
}

// SetVerifiedAt sets the "verified_at" field.
func (ic *InstitutionCreate) SetVerifiedAt(t time.Time) *InstitutionCreate {
	ic.mutation.SetVerifiedAt(t)
	return ic
}

// SetOtp sets the "otp" field.
func (ic *InstitutionCreate) SetOtp(u uint64) *InstitutionCreate {
	ic.mutation.SetOtp(u)
	return ic
}

// SetID sets the "id" field.
func (ic *InstitutionCreate) SetID(u uuid.UUID) *InstitutionCreate {
	ic.mutation.SetID(u)
	return ic
}

// AddRecordaccesIDs adds the "recordaccess" edge to the RecordAccess entity by IDs.
func (ic *InstitutionCreate) AddRecordaccesIDs(ids ...uuid.UUID) *InstitutionCreate {
	ic.mutation.AddRecordaccesIDs(ids...)
	return ic
}

// AddRecordaccess adds the "recordaccess" edges to the RecordAccess entity.
func (ic *InstitutionCreate) AddRecordaccess(r ...*RecordAccess) *InstitutionCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ic.AddRecordaccesIDs(ids...)
}

// AddDoctorIDs adds the "doctor" edge to the User entity by IDs.
func (ic *InstitutionCreate) AddDoctorIDs(ids ...uuid.UUID) *InstitutionCreate {
	ic.mutation.AddDoctorIDs(ids...)
	return ic
}

// AddDoctor adds the "doctor" edges to the User entity.
func (ic *InstitutionCreate) AddDoctor(u ...*User) *InstitutionCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ic.AddDoctorIDs(ids...)
}

// AddMedicalrecordIDs adds the "medicalrecord" edge to the MedicalRecord entity by IDs.
func (ic *InstitutionCreate) AddMedicalrecordIDs(ids ...uuid.UUID) *InstitutionCreate {
	ic.mutation.AddMedicalrecordIDs(ids...)
	return ic
}

// AddMedicalrecord adds the "medicalrecord" edges to the MedicalRecord entity.
func (ic *InstitutionCreate) AddMedicalrecord(m ...*MedicalRecord) *InstitutionCreate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ic.AddMedicalrecordIDs(ids...)
}

// Mutation returns the InstitutionMutation object of the builder.
func (ic *InstitutionCreate) Mutation() *InstitutionMutation {
	return ic.mutation
}

// Save creates the Institution in the database.
func (ic *InstitutionCreate) Save(ctx context.Context) (*Institution, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InstitutionCreate) SaveX(ctx context.Context) *Institution {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InstitutionCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InstitutionCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InstitutionCreate) defaults() {
	if _, ok := ic.mutation.IsArchived(); !ok {
		v := institution.DefaultIsArchived
		ic.mutation.SetIsArchived(v)
	}
	if _, ok := ic.mutation.IsVerified(); !ok {
		v := institution.DefaultIsVerified
		ic.mutation.SetIsVerified(v)
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := institution.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := institution.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InstitutionCreate) check() error {
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Institution.name"`)}
	}
	if _, ok := ic.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Institution.description"`)}
	}
	if _, ok := ic.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "Institution.location"`)}
	}
	if _, ok := ic.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Institution.email"`)}
	}
	if v, ok := ic.mutation.Email(); ok {
		if err := institution.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Institution.email": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "Institution.password"`)}
	}
	if _, ok := ic.mutation.IsArchived(); !ok {
		return &ValidationError{Name: "is_archived", err: errors.New(`ent: missing required field "Institution.is_archived"`)}
	}
	if _, ok := ic.mutation.IsVerified(); !ok {
		return &ValidationError{Name: "is_verified", err: errors.New(`ent: missing required field "Institution.is_verified"`)}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Institution.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Institution.updated_at"`)}
	}
	if _, ok := ic.mutation.ArchivedAt(); !ok {
		return &ValidationError{Name: "archived_at", err: errors.New(`ent: missing required field "Institution.archived_at"`)}
	}
	if _, ok := ic.mutation.VerifiedAt(); !ok {
		return &ValidationError{Name: "verified_at", err: errors.New(`ent: missing required field "Institution.verified_at"`)}
	}
	if _, ok := ic.mutation.Otp(); !ok {
		return &ValidationError{Name: "otp", err: errors.New(`ent: missing required field "Institution.otp"`)}
	}
	return nil
}

func (ic *InstitutionCreate) sqlSave(ctx context.Context) (*Institution, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InstitutionCreate) createSpec() (*Institution, *sqlgraph.CreateSpec) {
	var (
		_node = &Institution{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(institution.Table, sqlgraph.NewFieldSpec(institution.FieldID, field.TypeUUID))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.Name(); ok {
		_spec.SetField(institution.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ic.mutation.Description(); ok {
		_spec.SetField(institution.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := ic.mutation.Location(); ok {
		_spec.SetField(institution.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := ic.mutation.Email(); ok {
		_spec.SetField(institution.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := ic.mutation.Password(); ok {
		_spec.SetField(institution.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := ic.mutation.Phone(); ok {
		_spec.SetField(institution.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := ic.mutation.IsArchived(); ok {
		_spec.SetField(institution.FieldIsArchived, field.TypeBool, value)
		_node.IsArchived = value
	}
	if value, ok := ic.mutation.IsVerified(); ok {
		_spec.SetField(institution.FieldIsVerified, field.TypeBool, value)
		_node.IsVerified = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(institution.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(institution.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.ArchivedAt(); ok {
		_spec.SetField(institution.FieldArchivedAt, field.TypeTime, value)
		_node.ArchivedAt = &value
	}
	if value, ok := ic.mutation.VerifiedAt(); ok {
		_spec.SetField(institution.FieldVerifiedAt, field.TypeTime, value)
		_node.VerifiedAt = &value
	}
	if value, ok := ic.mutation.Otp(); ok {
		_spec.SetField(institution.FieldOtp, field.TypeUint64, value)
		_node.Otp = &value
	}
	if nodes := ic.mutation.RecordaccessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.RecordaccessTable,
			Columns: []string{institution.RecordaccessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recordaccess.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.DoctorTable,
			Columns: []string{institution.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.MedicalrecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.MedicalrecordTable,
			Columns: []string{institution.MedicalrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InstitutionCreateBulk is the builder for creating many Institution entities in bulk.
type InstitutionCreateBulk struct {
	config
	err      error
	builders []*InstitutionCreate
}

// Save creates the Institution entities in the database.
func (icb *InstitutionCreateBulk) Save(ctx context.Context) ([]*Institution, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Institution, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InstitutionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InstitutionCreateBulk) SaveX(ctx context.Context) []*Institution {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InstitutionCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InstitutionCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
