// Code generated by ent, DO NOT EDIT.

package institution

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the institution type in the database.
	Label = "institution"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldIsArchived holds the string denoting the is_archived field in the database.
	FieldIsArchived = "is_archived"
	// FieldIsVerified holds the string denoting the is_verified field in the database.
	FieldIsVerified = "is_verified"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldArchivedAt holds the string denoting the archived_at field in the database.
	FieldArchivedAt = "archived_at"
	// FieldVerifiedAt holds the string denoting the verified_at field in the database.
	FieldVerifiedAt = "verified_at"
	// FieldOtp holds the string denoting the otp field in the database.
	FieldOtp = "otp"
	// EdgeRecordaccess holds the string denoting the recordaccess edge name in mutations.
	EdgeRecordaccess = "recordaccess"
	// EdgeDoctor holds the string denoting the doctor edge name in mutations.
	EdgeDoctor = "doctor"
	// EdgeMedicalrecord holds the string denoting the medicalrecord edge name in mutations.
	EdgeMedicalrecord = "medicalrecord"
	// Table holds the table name of the institution in the database.
	Table = "institutions"
	// RecordaccessTable is the table that holds the recordaccess relation/edge.
	RecordaccessTable = "record_accesses"
	// RecordaccessInverseTable is the table name for the RecordAccess entity.
	// It exists in this package in order to avoid circular dependency with the "recordaccess" package.
	RecordaccessInverseTable = "record_accesses"
	// RecordaccessColumn is the table column denoting the recordaccess relation/edge.
	RecordaccessColumn = "institution_id"
	// DoctorTable is the table that holds the doctor relation/edge.
	DoctorTable = "users"
	// DoctorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	DoctorInverseTable = "users"
	// DoctorColumn is the table column denoting the doctor relation/edge.
	DoctorColumn = "institution_doctor"
	// MedicalrecordTable is the table that holds the medicalrecord relation/edge.
	MedicalrecordTable = "medical_records"
	// MedicalrecordInverseTable is the table name for the MedicalRecord entity.
	// It exists in this package in order to avoid circular dependency with the "medicalrecord" package.
	MedicalrecordInverseTable = "medical_records"
	// MedicalrecordColumn is the table column denoting the medicalrecord relation/edge.
	MedicalrecordColumn = "institution_id"
)

// Columns holds all SQL columns for institution fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldLocation,
	FieldEmail,
	FieldPassword,
	FieldPhone,
	FieldIsArchived,
	FieldIsVerified,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldArchivedAt,
	FieldVerifiedAt,
	FieldOtp,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultIsArchived holds the default value on creation for the "is_archived" field.
	DefaultIsArchived bool
	// DefaultIsVerified holds the default value on creation for the "is_verified" field.
	DefaultIsVerified bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Institution queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByIsArchived orders the results by the is_archived field.
func ByIsArchived(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsArchived, opts...).ToFunc()
}

// ByIsVerified orders the results by the is_verified field.
func ByIsVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsVerified, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByArchivedAt orders the results by the archived_at field.
func ByArchivedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchivedAt, opts...).ToFunc()
}

// ByVerifiedAt orders the results by the verified_at field.
func ByVerifiedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedAt, opts...).ToFunc()
}

// ByOtp orders the results by the otp field.
func ByOtp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOtp, opts...).ToFunc()
}

// ByRecordaccessCount orders the results by recordaccess count.
func ByRecordaccessCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecordaccessStep(), opts...)
	}
}

// ByRecordaccess orders the results by recordaccess terms.
func ByRecordaccess(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecordaccessStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDoctorCount orders the results by doctor count.
func ByDoctorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDoctorStep(), opts...)
	}
}

// ByDoctor orders the results by doctor terms.
func ByDoctor(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDoctorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMedicalrecordCount orders the results by medicalrecord count.
func ByMedicalrecordCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMedicalrecordStep(), opts...)
	}
}

// ByMedicalrecord orders the results by medicalrecord terms.
func ByMedicalrecord(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMedicalrecordStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRecordaccessStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecordaccessInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RecordaccessTable, RecordaccessColumn),
	)
}
func newDoctorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DoctorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DoctorTable, DoctorColumn),
	)
}
func newMedicalrecordStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MedicalrecordInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MedicalrecordTable, MedicalrecordColumn),
	)
}
