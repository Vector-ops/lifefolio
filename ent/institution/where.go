// Code generated by ent, DO NOT EDIT.

package institution

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/vector-ops/lifefolio/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Institution {
	return predicate.Institution(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Institution {
	return predicate.Institution(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Institution {
	return predicate.Institution(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Institution {
	return predicate.Institution(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Institution {
	return predicate.Institution(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Institution {
	return predicate.Institution(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Institution {
	return predicate.Institution(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldDescription, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldLocation, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldEmail, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldPassword, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldPhone, v))
}

// IsArchived applies equality check predicate on the "is_archived" field. It's identical to IsArchivedEQ.
func IsArchived(v bool) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldIsArchived, v))
}

// IsVerified applies equality check predicate on the "is_verified" field. It's identical to IsVerifiedEQ.
func IsVerified(v bool) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldIsVerified, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldUpdatedAt, v))
}

// ArchivedAt applies equality check predicate on the "archived_at" field. It's identical to ArchivedAtEQ.
func ArchivedAt(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldArchivedAt, v))
}

// VerifiedAt applies equality check predicate on the "verified_at" field. It's identical to VerifiedAtEQ.
func VerifiedAt(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldVerifiedAt, v))
}

// Otp applies equality check predicate on the "otp" field. It's identical to OtpEQ.
func Otp(v int64) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldOtp, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Institution {
	return predicate.Institution(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Institution {
	return predicate.Institution(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Institution {
	return predicate.Institution(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Institution {
	return predicate.Institution(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Institution {
	return predicate.Institution(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Institution {
	return predicate.Institution(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Institution {
	return predicate.Institution(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Institution {
	return predicate.Institution(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Institution {
	return predicate.Institution(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Institution {
	return predicate.Institution(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Institution {
	return predicate.Institution(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Institution {
	return predicate.Institution(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Institution {
	return predicate.Institution(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Institution {
	return predicate.Institution(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Institution {
	return predicate.Institution(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Institution {
	return predicate.Institution(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Institution {
	return predicate.Institution(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Institution {
	return predicate.Institution(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Institution {
	return predicate.Institution(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Institution {
	return predicate.Institution(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Institution {
	return predicate.Institution(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Institution {
	return predicate.Institution(sql.FieldContainsFold(FieldDescription, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Institution {
	return predicate.Institution(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Institution {
	return predicate.Institution(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Institution {
	return predicate.Institution(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Institution {
	return predicate.Institution(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Institution {
	return predicate.Institution(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Institution {
	return predicate.Institution(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Institution {
	return predicate.Institution(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Institution {
	return predicate.Institution(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Institution {
	return predicate.Institution(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Institution {
	return predicate.Institution(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Institution {
	return predicate.Institution(sql.FieldContainsFold(FieldLocation, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Institution {
	return predicate.Institution(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Institution {
	return predicate.Institution(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Institution {
	return predicate.Institution(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Institution {
	return predicate.Institution(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Institution {
	return predicate.Institution(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Institution {
	return predicate.Institution(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Institution {
	return predicate.Institution(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Institution {
	return predicate.Institution(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Institution {
	return predicate.Institution(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Institution {
	return predicate.Institution(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Institution {
	return predicate.Institution(sql.FieldContainsFold(FieldEmail, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Institution {
	return predicate.Institution(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Institution {
	return predicate.Institution(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Institution {
	return predicate.Institution(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Institution {
	return predicate.Institution(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Institution {
	return predicate.Institution(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Institution {
	return predicate.Institution(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Institution {
	return predicate.Institution(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Institution {
	return predicate.Institution(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Institution {
	return predicate.Institution(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Institution {
	return predicate.Institution(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Institution {
	return predicate.Institution(sql.FieldContainsFold(FieldPassword, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Institution {
	return predicate.Institution(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Institution {
	return predicate.Institution(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Institution {
	return predicate.Institution(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Institution {
	return predicate.Institution(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Institution {
	return predicate.Institution(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Institution {
	return predicate.Institution(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Institution {
	return predicate.Institution(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Institution {
	return predicate.Institution(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Institution {
	return predicate.Institution(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Institution {
	return predicate.Institution(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.Institution {
	return predicate.Institution(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.Institution {
	return predicate.Institution(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Institution {
	return predicate.Institution(sql.FieldContainsFold(FieldPhone, v))
}

// IsArchivedEQ applies the EQ predicate on the "is_archived" field.
func IsArchivedEQ(v bool) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldIsArchived, v))
}

// IsArchivedNEQ applies the NEQ predicate on the "is_archived" field.
func IsArchivedNEQ(v bool) predicate.Institution {
	return predicate.Institution(sql.FieldNEQ(FieldIsArchived, v))
}

// IsVerifiedEQ applies the EQ predicate on the "is_verified" field.
func IsVerifiedEQ(v bool) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldIsVerified, v))
}

// IsVerifiedNEQ applies the NEQ predicate on the "is_verified" field.
func IsVerifiedNEQ(v bool) predicate.Institution {
	return predicate.Institution(sql.FieldNEQ(FieldIsVerified, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldLTE(FieldUpdatedAt, v))
}

// ArchivedAtEQ applies the EQ predicate on the "archived_at" field.
func ArchivedAtEQ(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldArchivedAt, v))
}

// ArchivedAtNEQ applies the NEQ predicate on the "archived_at" field.
func ArchivedAtNEQ(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldNEQ(FieldArchivedAt, v))
}

// ArchivedAtIn applies the In predicate on the "archived_at" field.
func ArchivedAtIn(vs ...time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldIn(FieldArchivedAt, vs...))
}

// ArchivedAtNotIn applies the NotIn predicate on the "archived_at" field.
func ArchivedAtNotIn(vs ...time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldNotIn(FieldArchivedAt, vs...))
}

// ArchivedAtGT applies the GT predicate on the "archived_at" field.
func ArchivedAtGT(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldGT(FieldArchivedAt, v))
}

// ArchivedAtGTE applies the GTE predicate on the "archived_at" field.
func ArchivedAtGTE(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldGTE(FieldArchivedAt, v))
}

// ArchivedAtLT applies the LT predicate on the "archived_at" field.
func ArchivedAtLT(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldLT(FieldArchivedAt, v))
}

// ArchivedAtLTE applies the LTE predicate on the "archived_at" field.
func ArchivedAtLTE(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldLTE(FieldArchivedAt, v))
}

// VerifiedAtEQ applies the EQ predicate on the "verified_at" field.
func VerifiedAtEQ(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldVerifiedAt, v))
}

// VerifiedAtNEQ applies the NEQ predicate on the "verified_at" field.
func VerifiedAtNEQ(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldNEQ(FieldVerifiedAt, v))
}

// VerifiedAtIn applies the In predicate on the "verified_at" field.
func VerifiedAtIn(vs ...time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldIn(FieldVerifiedAt, vs...))
}

// VerifiedAtNotIn applies the NotIn predicate on the "verified_at" field.
func VerifiedAtNotIn(vs ...time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldNotIn(FieldVerifiedAt, vs...))
}

// VerifiedAtGT applies the GT predicate on the "verified_at" field.
func VerifiedAtGT(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldGT(FieldVerifiedAt, v))
}

// VerifiedAtGTE applies the GTE predicate on the "verified_at" field.
func VerifiedAtGTE(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldGTE(FieldVerifiedAt, v))
}

// VerifiedAtLT applies the LT predicate on the "verified_at" field.
func VerifiedAtLT(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldLT(FieldVerifiedAt, v))
}

// VerifiedAtLTE applies the LTE predicate on the "verified_at" field.
func VerifiedAtLTE(v time.Time) predicate.Institution {
	return predicate.Institution(sql.FieldLTE(FieldVerifiedAt, v))
}

// OtpEQ applies the EQ predicate on the "otp" field.
func OtpEQ(v int64) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldOtp, v))
}

// OtpNEQ applies the NEQ predicate on the "otp" field.
func OtpNEQ(v int64) predicate.Institution {
	return predicate.Institution(sql.FieldNEQ(FieldOtp, v))
}

// OtpIn applies the In predicate on the "otp" field.
func OtpIn(vs ...int64) predicate.Institution {
	return predicate.Institution(sql.FieldIn(FieldOtp, vs...))
}

// OtpNotIn applies the NotIn predicate on the "otp" field.
func OtpNotIn(vs ...int64) predicate.Institution {
	return predicate.Institution(sql.FieldNotIn(FieldOtp, vs...))
}

// OtpGT applies the GT predicate on the "otp" field.
func OtpGT(v int64) predicate.Institution {
	return predicate.Institution(sql.FieldGT(FieldOtp, v))
}

// OtpGTE applies the GTE predicate on the "otp" field.
func OtpGTE(v int64) predicate.Institution {
	return predicate.Institution(sql.FieldGTE(FieldOtp, v))
}

// OtpLT applies the LT predicate on the "otp" field.
func OtpLT(v int64) predicate.Institution {
	return predicate.Institution(sql.FieldLT(FieldOtp, v))
}

// OtpLTE applies the LTE predicate on the "otp" field.
func OtpLTE(v int64) predicate.Institution {
	return predicate.Institution(sql.FieldLTE(FieldOtp, v))
}

// HasRecordaccess applies the HasEdge predicate on the "recordaccess" edge.
func HasRecordaccess() predicate.Institution {
	return predicate.Institution(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RecordaccessTable, RecordaccessColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecordaccessWith applies the HasEdge predicate on the "recordaccess" edge with a given conditions (other predicates).
func HasRecordaccessWith(preds ...predicate.RecordAccess) predicate.Institution {
	return predicate.Institution(func(s *sql.Selector) {
		step := newRecordaccessStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDoctor applies the HasEdge predicate on the "doctor" edge.
func HasDoctor() predicate.Institution {
	return predicate.Institution(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DoctorTable, DoctorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDoctorWith applies the HasEdge predicate on the "doctor" edge with a given conditions (other predicates).
func HasDoctorWith(preds ...predicate.User) predicate.Institution {
	return predicate.Institution(func(s *sql.Selector) {
		step := newDoctorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMedicalrecord applies the HasEdge predicate on the "medicalrecord" edge.
func HasMedicalrecord() predicate.Institution {
	return predicate.Institution(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MedicalrecordTable, MedicalrecordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMedicalrecordWith applies the HasEdge predicate on the "medicalrecord" edge with a given conditions (other predicates).
func HasMedicalrecordWith(preds ...predicate.MedicalRecord) predicate.Institution {
	return predicate.Institution(func(s *sql.Selector) {
		step := newMedicalrecordStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Institution) predicate.Institution {
	return predicate.Institution(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Institution) predicate.Institution {
	return predicate.Institution(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Institution) predicate.Institution {
	return predicate.Institution(sql.NotPredicates(p))
}
