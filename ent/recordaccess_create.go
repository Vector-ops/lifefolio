// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/vector-ops/lifefolio/ent/institution"
	"github.com/vector-ops/lifefolio/ent/medicalrecord"
	"github.com/vector-ops/lifefolio/ent/recordaccess"
)

// RecordAccessCreate is the builder for creating a RecordAccess entity.
type RecordAccessCreate struct {
	config
	mutation *RecordAccessMutation
	hooks    []Hook
}

// SetRecordID sets the "record_id" field.
func (rac *RecordAccessCreate) SetRecordID(u uuid.UUID) *RecordAccessCreate {
	rac.mutation.SetRecordID(u)
	return rac
}

// SetInstitutionID sets the "institution_id" field.
func (rac *RecordAccessCreate) SetInstitutionID(u uuid.UUID) *RecordAccessCreate {
	rac.mutation.SetInstitutionID(u)
	return rac
}

// SetApproved sets the "approved" field.
func (rac *RecordAccessCreate) SetApproved(b bool) *RecordAccessCreate {
	rac.mutation.SetApproved(b)
	return rac
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (rac *RecordAccessCreate) SetNillableApproved(b *bool) *RecordAccessCreate {
	if b != nil {
		rac.SetApproved(*b)
	}
	return rac
}

// SetApprovedAt sets the "approved_at" field.
func (rac *RecordAccessCreate) SetApprovedAt(t time.Time) *RecordAccessCreate {
	rac.mutation.SetApprovedAt(t)
	return rac
}

// SetID sets the "id" field.
func (rac *RecordAccessCreate) SetID(u uuid.UUID) *RecordAccessCreate {
	rac.mutation.SetID(u)
	return rac
}

// SetMedicalrecordID sets the "medicalrecord" edge to the MedicalRecord entity by ID.
func (rac *RecordAccessCreate) SetMedicalrecordID(id uuid.UUID) *RecordAccessCreate {
	rac.mutation.SetMedicalrecordID(id)
	return rac
}

// SetMedicalrecord sets the "medicalrecord" edge to the MedicalRecord entity.
func (rac *RecordAccessCreate) SetMedicalrecord(m *MedicalRecord) *RecordAccessCreate {
	return rac.SetMedicalrecordID(m.ID)
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (rac *RecordAccessCreate) SetInstitution(i *Institution) *RecordAccessCreate {
	return rac.SetInstitutionID(i.ID)
}

// Mutation returns the RecordAccessMutation object of the builder.
func (rac *RecordAccessCreate) Mutation() *RecordAccessMutation {
	return rac.mutation
}

// Save creates the RecordAccess in the database.
func (rac *RecordAccessCreate) Save(ctx context.Context) (*RecordAccess, error) {
	rac.defaults()
	return withHooks(ctx, rac.sqlSave, rac.mutation, rac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rac *RecordAccessCreate) SaveX(ctx context.Context) *RecordAccess {
	v, err := rac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rac *RecordAccessCreate) Exec(ctx context.Context) error {
	_, err := rac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rac *RecordAccessCreate) ExecX(ctx context.Context) {
	if err := rac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rac *RecordAccessCreate) defaults() {
	if _, ok := rac.mutation.Approved(); !ok {
		v := recordaccess.DefaultApproved
		rac.mutation.SetApproved(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rac *RecordAccessCreate) check() error {
	if _, ok := rac.mutation.RecordID(); !ok {
		return &ValidationError{Name: "record_id", err: errors.New(`ent: missing required field "RecordAccess.record_id"`)}
	}
	if _, ok := rac.mutation.InstitutionID(); !ok {
		return &ValidationError{Name: "institution_id", err: errors.New(`ent: missing required field "RecordAccess.institution_id"`)}
	}
	if _, ok := rac.mutation.Approved(); !ok {
		return &ValidationError{Name: "approved", err: errors.New(`ent: missing required field "RecordAccess.approved"`)}
	}
	if _, ok := rac.mutation.ApprovedAt(); !ok {
		return &ValidationError{Name: "approved_at", err: errors.New(`ent: missing required field "RecordAccess.approved_at"`)}
	}
	if len(rac.mutation.MedicalrecordIDs()) == 0 {
		return &ValidationError{Name: "medicalrecord", err: errors.New(`ent: missing required edge "RecordAccess.medicalrecord"`)}
	}
	if len(rac.mutation.InstitutionIDs()) == 0 {
		return &ValidationError{Name: "institution", err: errors.New(`ent: missing required edge "RecordAccess.institution"`)}
	}
	return nil
}

func (rac *RecordAccessCreate) sqlSave(ctx context.Context) (*RecordAccess, error) {
	if err := rac.check(); err != nil {
		return nil, err
	}
	_node, _spec := rac.createSpec()
	if err := sqlgraph.CreateNode(ctx, rac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rac.mutation.id = &_node.ID
	rac.mutation.done = true
	return _node, nil
}

func (rac *RecordAccessCreate) createSpec() (*RecordAccess, *sqlgraph.CreateSpec) {
	var (
		_node = &RecordAccess{config: rac.config}
		_spec = sqlgraph.NewCreateSpec(recordaccess.Table, sqlgraph.NewFieldSpec(recordaccess.FieldID, field.TypeUUID))
	)
	if id, ok := rac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rac.mutation.Approved(); ok {
		_spec.SetField(recordaccess.FieldApproved, field.TypeBool, value)
		_node.Approved = value
	}
	if value, ok := rac.mutation.ApprovedAt(); ok {
		_spec.SetField(recordaccess.FieldApprovedAt, field.TypeTime, value)
		_node.ApprovedAt = &value
	}
	if nodes := rac.mutation.MedicalrecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordaccess.MedicalrecordTable,
			Columns: []string{recordaccess.MedicalrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RecordID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rac.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordaccess.InstitutionTable,
			Columns: []string{recordaccess.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InstitutionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RecordAccessCreateBulk is the builder for creating many RecordAccess entities in bulk.
type RecordAccessCreateBulk struct {
	config
	err      error
	builders []*RecordAccessCreate
}

// Save creates the RecordAccess entities in the database.
func (racb *RecordAccessCreateBulk) Save(ctx context.Context) ([]*RecordAccess, error) {
	if racb.err != nil {
		return nil, racb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(racb.builders))
	nodes := make([]*RecordAccess, len(racb.builders))
	mutators := make([]Mutator, len(racb.builders))
	for i := range racb.builders {
		func(i int, root context.Context) {
			builder := racb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecordAccessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, racb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, racb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, racb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (racb *RecordAccessCreateBulk) SaveX(ctx context.Context) []*RecordAccess {
	v, err := racb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (racb *RecordAccessCreateBulk) Exec(ctx context.Context) error {
	_, err := racb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (racb *RecordAccessCreateBulk) ExecX(ctx context.Context) {
	if err := racb.Exec(ctx); err != nil {
		panic(err)
	}
}
