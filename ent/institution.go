// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/vector-ops/lifefolio/ent/institution"
)

// Institution is the model entity for the Institution schema.
type Institution struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// IsArchived holds the value of the "is_archived" field.
	IsArchived bool `json:"is_archived,omitempty"`
	// IsVerified holds the value of the "is_verified" field.
	IsVerified bool `json:"is_verified,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ArchivedAt holds the value of the "archived_at" field.
	ArchivedAt *time.Time `json:"archived_at,omitempty"`
	// VerifiedAt holds the value of the "verified_at" field.
	VerifiedAt *time.Time `json:"verified_at,omitempty"`
	// Otp holds the value of the "otp" field.
	Otp *uint64 `json:"otp,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InstitutionQuery when eager-loading is set.
	Edges        InstitutionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InstitutionEdges holds the relations/edges for other nodes in the graph.
type InstitutionEdges struct {
	// Recordaccess holds the value of the recordaccess edge.
	Recordaccess []*RecordAccess `json:"recordaccess,omitempty"`
	// Doctor holds the value of the doctor edge.
	Doctor []*User `json:"doctor,omitempty"`
	// Medicalrecord holds the value of the medicalrecord edge.
	Medicalrecord []*MedicalRecord `json:"medicalrecord,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RecordaccessOrErr returns the Recordaccess value or an error if the edge
// was not loaded in eager-loading.
func (e InstitutionEdges) RecordaccessOrErr() ([]*RecordAccess, error) {
	if e.loadedTypes[0] {
		return e.Recordaccess, nil
	}
	return nil, &NotLoadedError{edge: "recordaccess"}
}

// DoctorOrErr returns the Doctor value or an error if the edge
// was not loaded in eager-loading.
func (e InstitutionEdges) DoctorOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Doctor, nil
	}
	return nil, &NotLoadedError{edge: "doctor"}
}

// MedicalrecordOrErr returns the Medicalrecord value or an error if the edge
// was not loaded in eager-loading.
func (e InstitutionEdges) MedicalrecordOrErr() ([]*MedicalRecord, error) {
	if e.loadedTypes[2] {
		return e.Medicalrecord, nil
	}
	return nil, &NotLoadedError{edge: "medicalrecord"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Institution) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case institution.FieldIsArchived, institution.FieldIsVerified:
			values[i] = new(sql.NullBool)
		case institution.FieldOtp:
			values[i] = new(sql.NullInt64)
		case institution.FieldName, institution.FieldDescription, institution.FieldLocation, institution.FieldEmail, institution.FieldPassword, institution.FieldPhone:
			values[i] = new(sql.NullString)
		case institution.FieldCreatedAt, institution.FieldUpdatedAt, institution.FieldArchivedAt, institution.FieldVerifiedAt:
			values[i] = new(sql.NullTime)
		case institution.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Institution fields.
func (i *Institution) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case institution.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case institution.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case institution.FieldDescription:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[j])
			} else if value.Valid {
				i.Description = new(string)
				*i.Description = value.String
			}
		case institution.FieldLocation:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[j])
			} else if value.Valid {
				i.Location = value.String
			}
		case institution.FieldEmail:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[j])
			} else if value.Valid {
				i.Email = value.String
			}
		case institution.FieldPassword:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[j])
			} else if value.Valid {
				i.Password = value.String
			}
		case institution.FieldPhone:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[j])
			} else if value.Valid {
				i.Phone = value.String
			}
		case institution.FieldIsArchived:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_archived", values[j])
			} else if value.Valid {
				i.IsArchived = value.Bool
			}
		case institution.FieldIsVerified:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_verified", values[j])
			} else if value.Valid {
				i.IsVerified = value.Bool
			}
		case institution.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case institution.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case institution.FieldArchivedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field archived_at", values[j])
			} else if value.Valid {
				i.ArchivedAt = new(time.Time)
				*i.ArchivedAt = value.Time
			}
		case institution.FieldVerifiedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field verified_at", values[j])
			} else if value.Valid {
				i.VerifiedAt = new(time.Time)
				*i.VerifiedAt = value.Time
			}
		case institution.FieldOtp:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field otp", values[j])
			} else if value.Valid {
				i.Otp = new(uint64)
				*i.Otp = uint64(value.Int64)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Institution.
// This includes values selected through modifiers, order, etc.
func (i *Institution) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryRecordaccess queries the "recordaccess" edge of the Institution entity.
func (i *Institution) QueryRecordaccess() *RecordAccessQuery {
	return NewInstitutionClient(i.config).QueryRecordaccess(i)
}

// QueryDoctor queries the "doctor" edge of the Institution entity.
func (i *Institution) QueryDoctor() *UserQuery {
	return NewInstitutionClient(i.config).QueryDoctor(i)
}

// QueryMedicalrecord queries the "medicalrecord" edge of the Institution entity.
func (i *Institution) QueryMedicalrecord() *MedicalRecordQuery {
	return NewInstitutionClient(i.config).QueryMedicalrecord(i)
}

// Update returns a builder for updating this Institution.
// Note that you need to call Institution.Unwrap() before calling this method if this Institution
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Institution) Update() *InstitutionUpdateOne {
	return NewInstitutionClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Institution entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Institution) Unwrap() *Institution {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Institution is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Institution) String() string {
	var builder strings.Builder
	builder.WriteString("Institution(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("name=")
	builder.WriteString(i.Name)
	builder.WriteString(", ")
	if v := i.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(i.Location)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(i.Email)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(i.Phone)
	builder.WriteString(", ")
	builder.WriteString("is_archived=")
	builder.WriteString(fmt.Sprintf("%v", i.IsArchived))
	builder.WriteString(", ")
	builder.WriteString("is_verified=")
	builder.WriteString(fmt.Sprintf("%v", i.IsVerified))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := i.ArchivedAt; v != nil {
		builder.WriteString("archived_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := i.VerifiedAt; v != nil {
		builder.WriteString("verified_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := i.Otp; v != nil {
		builder.WriteString("otp=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Institutions is a parsable slice of Institution.
type Institutions []*Institution
