// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/vector-ops/lifefolio/ent/institution"
	"github.com/vector-ops/lifefolio/ent/medicalrecord"
	"github.com/vector-ops/lifefolio/ent/predicate"
	"github.com/vector-ops/lifefolio/ent/recordaccess"
	"github.com/vector-ops/lifefolio/ent/user"
)

// InstitutionUpdate is the builder for updating Institution entities.
type InstitutionUpdate struct {
	config
	hooks    []Hook
	mutation *InstitutionMutation
}

// Where appends a list predicates to the InstitutionUpdate builder.
func (iu *InstitutionUpdate) Where(ps ...predicate.Institution) *InstitutionUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetName sets the "name" field.
func (iu *InstitutionUpdate) SetName(s string) *InstitutionUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iu *InstitutionUpdate) SetNillableName(s *string) *InstitutionUpdate {
	if s != nil {
		iu.SetName(*s)
	}
	return iu
}

// SetDescription sets the "description" field.
func (iu *InstitutionUpdate) SetDescription(s string) *InstitutionUpdate {
	iu.mutation.SetDescription(s)
	return iu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iu *InstitutionUpdate) SetNillableDescription(s *string) *InstitutionUpdate {
	if s != nil {
		iu.SetDescription(*s)
	}
	return iu
}

// SetLocation sets the "location" field.
func (iu *InstitutionUpdate) SetLocation(s string) *InstitutionUpdate {
	iu.mutation.SetLocation(s)
	return iu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (iu *InstitutionUpdate) SetNillableLocation(s *string) *InstitutionUpdate {
	if s != nil {
		iu.SetLocation(*s)
	}
	return iu
}

// SetEmail sets the "email" field.
func (iu *InstitutionUpdate) SetEmail(s string) *InstitutionUpdate {
	iu.mutation.SetEmail(s)
	return iu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (iu *InstitutionUpdate) SetNillableEmail(s *string) *InstitutionUpdate {
	if s != nil {
		iu.SetEmail(*s)
	}
	return iu
}

// SetPassword sets the "password" field.
func (iu *InstitutionUpdate) SetPassword(s string) *InstitutionUpdate {
	iu.mutation.SetPassword(s)
	return iu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (iu *InstitutionUpdate) SetNillablePassword(s *string) *InstitutionUpdate {
	if s != nil {
		iu.SetPassword(*s)
	}
	return iu
}

// SetPhone sets the "phone" field.
func (iu *InstitutionUpdate) SetPhone(s string) *InstitutionUpdate {
	iu.mutation.SetPhone(s)
	return iu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (iu *InstitutionUpdate) SetNillablePhone(s *string) *InstitutionUpdate {
	if s != nil {
		iu.SetPhone(*s)
	}
	return iu
}

// ClearPhone clears the value of the "phone" field.
func (iu *InstitutionUpdate) ClearPhone() *InstitutionUpdate {
	iu.mutation.ClearPhone()
	return iu
}

// SetIsArchived sets the "is_archived" field.
func (iu *InstitutionUpdate) SetIsArchived(b bool) *InstitutionUpdate {
	iu.mutation.SetIsArchived(b)
	return iu
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (iu *InstitutionUpdate) SetNillableIsArchived(b *bool) *InstitutionUpdate {
	if b != nil {
		iu.SetIsArchived(*b)
	}
	return iu
}

// SetIsVerified sets the "is_verified" field.
func (iu *InstitutionUpdate) SetIsVerified(b bool) *InstitutionUpdate {
	iu.mutation.SetIsVerified(b)
	return iu
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (iu *InstitutionUpdate) SetNillableIsVerified(b *bool) *InstitutionUpdate {
	if b != nil {
		iu.SetIsVerified(*b)
	}
	return iu
}

// SetCreatedAt sets the "created_at" field.
func (iu *InstitutionUpdate) SetCreatedAt(t time.Time) *InstitutionUpdate {
	iu.mutation.SetCreatedAt(t)
	return iu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iu *InstitutionUpdate) SetNillableCreatedAt(t *time.Time) *InstitutionUpdate {
	if t != nil {
		iu.SetCreatedAt(*t)
	}
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *InstitutionUpdate) SetUpdatedAt(t time.Time) *InstitutionUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iu *InstitutionUpdate) SetNillableUpdatedAt(t *time.Time) *InstitutionUpdate {
	if t != nil {
		iu.SetUpdatedAt(*t)
	}
	return iu
}

// SetArchivedAt sets the "archived_at" field.
func (iu *InstitutionUpdate) SetArchivedAt(t time.Time) *InstitutionUpdate {
	iu.mutation.SetArchivedAt(t)
	return iu
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (iu *InstitutionUpdate) SetNillableArchivedAt(t *time.Time) *InstitutionUpdate {
	if t != nil {
		iu.SetArchivedAt(*t)
	}
	return iu
}

// SetVerifiedAt sets the "verified_at" field.
func (iu *InstitutionUpdate) SetVerifiedAt(t time.Time) *InstitutionUpdate {
	iu.mutation.SetVerifiedAt(t)
	return iu
}

// SetNillableVerifiedAt sets the "verified_at" field if the given value is not nil.
func (iu *InstitutionUpdate) SetNillableVerifiedAt(t *time.Time) *InstitutionUpdate {
	if t != nil {
		iu.SetVerifiedAt(*t)
	}
	return iu
}

// SetOtp sets the "otp" field.
func (iu *InstitutionUpdate) SetOtp(i int64) *InstitutionUpdate {
	iu.mutation.ResetOtp()
	iu.mutation.SetOtp(i)
	return iu
}

// SetNillableOtp sets the "otp" field if the given value is not nil.
func (iu *InstitutionUpdate) SetNillableOtp(i *int64) *InstitutionUpdate {
	if i != nil {
		iu.SetOtp(*i)
	}
	return iu
}

// AddOtp adds i to the "otp" field.
func (iu *InstitutionUpdate) AddOtp(i int64) *InstitutionUpdate {
	iu.mutation.AddOtp(i)
	return iu
}

// AddRecordaccesIDs adds the "recordaccess" edge to the RecordAccess entity by IDs.
func (iu *InstitutionUpdate) AddRecordaccesIDs(ids ...uuid.UUID) *InstitutionUpdate {
	iu.mutation.AddRecordaccesIDs(ids...)
	return iu
}

// AddRecordaccess adds the "recordaccess" edges to the RecordAccess entity.
func (iu *InstitutionUpdate) AddRecordaccess(r ...*RecordAccess) *InstitutionUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iu.AddRecordaccesIDs(ids...)
}

// AddDoctorIDs adds the "doctor" edge to the User entity by IDs.
func (iu *InstitutionUpdate) AddDoctorIDs(ids ...uuid.UUID) *InstitutionUpdate {
	iu.mutation.AddDoctorIDs(ids...)
	return iu
}

// AddDoctor adds the "doctor" edges to the User entity.
func (iu *InstitutionUpdate) AddDoctor(u ...*User) *InstitutionUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return iu.AddDoctorIDs(ids...)
}

// AddMedicalrecordIDs adds the "medicalrecord" edge to the MedicalRecord entity by IDs.
func (iu *InstitutionUpdate) AddMedicalrecordIDs(ids ...uuid.UUID) *InstitutionUpdate {
	iu.mutation.AddMedicalrecordIDs(ids...)
	return iu
}

// AddMedicalrecord adds the "medicalrecord" edges to the MedicalRecord entity.
func (iu *InstitutionUpdate) AddMedicalrecord(m ...*MedicalRecord) *InstitutionUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return iu.AddMedicalrecordIDs(ids...)
}

// Mutation returns the InstitutionMutation object of the builder.
func (iu *InstitutionUpdate) Mutation() *InstitutionMutation {
	return iu.mutation
}

// ClearRecordaccess clears all "recordaccess" edges to the RecordAccess entity.
func (iu *InstitutionUpdate) ClearRecordaccess() *InstitutionUpdate {
	iu.mutation.ClearRecordaccess()
	return iu
}

// RemoveRecordaccesIDs removes the "recordaccess" edge to RecordAccess entities by IDs.
func (iu *InstitutionUpdate) RemoveRecordaccesIDs(ids ...uuid.UUID) *InstitutionUpdate {
	iu.mutation.RemoveRecordaccesIDs(ids...)
	return iu
}

// RemoveRecordaccess removes "recordaccess" edges to RecordAccess entities.
func (iu *InstitutionUpdate) RemoveRecordaccess(r ...*RecordAccess) *InstitutionUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iu.RemoveRecordaccesIDs(ids...)
}

// ClearDoctor clears all "doctor" edges to the User entity.
func (iu *InstitutionUpdate) ClearDoctor() *InstitutionUpdate {
	iu.mutation.ClearDoctor()
	return iu
}

// RemoveDoctorIDs removes the "doctor" edge to User entities by IDs.
func (iu *InstitutionUpdate) RemoveDoctorIDs(ids ...uuid.UUID) *InstitutionUpdate {
	iu.mutation.RemoveDoctorIDs(ids...)
	return iu
}

// RemoveDoctor removes "doctor" edges to User entities.
func (iu *InstitutionUpdate) RemoveDoctor(u ...*User) *InstitutionUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return iu.RemoveDoctorIDs(ids...)
}

// ClearMedicalrecord clears all "medicalrecord" edges to the MedicalRecord entity.
func (iu *InstitutionUpdate) ClearMedicalrecord() *InstitutionUpdate {
	iu.mutation.ClearMedicalrecord()
	return iu
}

// RemoveMedicalrecordIDs removes the "medicalrecord" edge to MedicalRecord entities by IDs.
func (iu *InstitutionUpdate) RemoveMedicalrecordIDs(ids ...uuid.UUID) *InstitutionUpdate {
	iu.mutation.RemoveMedicalrecordIDs(ids...)
	return iu
}

// RemoveMedicalrecord removes "medicalrecord" edges to MedicalRecord entities.
func (iu *InstitutionUpdate) RemoveMedicalrecord(m ...*MedicalRecord) *InstitutionUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return iu.RemoveMedicalrecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InstitutionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InstitutionUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InstitutionUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InstitutionUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *InstitutionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(institution.Table, institution.Columns, sqlgraph.NewFieldSpec(institution.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(institution.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.Description(); ok {
		_spec.SetField(institution.FieldDescription, field.TypeString, value)
	}
	if value, ok := iu.mutation.Location(); ok {
		_spec.SetField(institution.FieldLocation, field.TypeString, value)
	}
	if value, ok := iu.mutation.Email(); ok {
		_spec.SetField(institution.FieldEmail, field.TypeString, value)
	}
	if value, ok := iu.mutation.Password(); ok {
		_spec.SetField(institution.FieldPassword, field.TypeString, value)
	}
	if value, ok := iu.mutation.Phone(); ok {
		_spec.SetField(institution.FieldPhone, field.TypeString, value)
	}
	if iu.mutation.PhoneCleared() {
		_spec.ClearField(institution.FieldPhone, field.TypeString)
	}
	if value, ok := iu.mutation.IsArchived(); ok {
		_spec.SetField(institution.FieldIsArchived, field.TypeBool, value)
	}
	if value, ok := iu.mutation.IsVerified(); ok {
		_spec.SetField(institution.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := iu.mutation.CreatedAt(); ok {
		_spec.SetField(institution.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(institution.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.ArchivedAt(); ok {
		_spec.SetField(institution.FieldArchivedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.VerifiedAt(); ok {
		_spec.SetField(institution.FieldVerifiedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.Otp(); ok {
		_spec.SetField(institution.FieldOtp, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedOtp(); ok {
		_spec.AddField(institution.FieldOtp, field.TypeInt64, value)
	}
	if iu.mutation.RecordaccessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.RecordaccessTable,
			Columns: []string{institution.RecordaccessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recordaccess.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedRecordaccessIDs(); len(nodes) > 0 && !iu.mutation.RecordaccessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.RecordaccessTable,
			Columns: []string{institution.RecordaccessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recordaccess.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RecordaccessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.RecordaccessTable,
			Columns: []string{institution.RecordaccessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recordaccess.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.DoctorTable,
			Columns: []string{institution.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedDoctorIDs(); len(nodes) > 0 && !iu.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.DoctorTable,
			Columns: []string{institution.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.DoctorTable,
			Columns: []string{institution.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.MedicalrecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.MedicalrecordTable,
			Columns: []string{institution.MedicalrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalrecord.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedMedicalrecordIDs(); len(nodes) > 0 && !iu.mutation.MedicalrecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.MedicalrecordTable,
			Columns: []string{institution.MedicalrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.MedicalrecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.MedicalrecordTable,
			Columns: []string{institution.MedicalrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{institution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InstitutionUpdateOne is the builder for updating a single Institution entity.
type InstitutionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InstitutionMutation
}

// SetName sets the "name" field.
func (iuo *InstitutionUpdateOne) SetName(s string) *InstitutionUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iuo *InstitutionUpdateOne) SetNillableName(s *string) *InstitutionUpdateOne {
	if s != nil {
		iuo.SetName(*s)
	}
	return iuo
}

// SetDescription sets the "description" field.
func (iuo *InstitutionUpdateOne) SetDescription(s string) *InstitutionUpdateOne {
	iuo.mutation.SetDescription(s)
	return iuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iuo *InstitutionUpdateOne) SetNillableDescription(s *string) *InstitutionUpdateOne {
	if s != nil {
		iuo.SetDescription(*s)
	}
	return iuo
}

// SetLocation sets the "location" field.
func (iuo *InstitutionUpdateOne) SetLocation(s string) *InstitutionUpdateOne {
	iuo.mutation.SetLocation(s)
	return iuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (iuo *InstitutionUpdateOne) SetNillableLocation(s *string) *InstitutionUpdateOne {
	if s != nil {
		iuo.SetLocation(*s)
	}
	return iuo
}

// SetEmail sets the "email" field.
func (iuo *InstitutionUpdateOne) SetEmail(s string) *InstitutionUpdateOne {
	iuo.mutation.SetEmail(s)
	return iuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (iuo *InstitutionUpdateOne) SetNillableEmail(s *string) *InstitutionUpdateOne {
	if s != nil {
		iuo.SetEmail(*s)
	}
	return iuo
}

// SetPassword sets the "password" field.
func (iuo *InstitutionUpdateOne) SetPassword(s string) *InstitutionUpdateOne {
	iuo.mutation.SetPassword(s)
	return iuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (iuo *InstitutionUpdateOne) SetNillablePassword(s *string) *InstitutionUpdateOne {
	if s != nil {
		iuo.SetPassword(*s)
	}
	return iuo
}

// SetPhone sets the "phone" field.
func (iuo *InstitutionUpdateOne) SetPhone(s string) *InstitutionUpdateOne {
	iuo.mutation.SetPhone(s)
	return iuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (iuo *InstitutionUpdateOne) SetNillablePhone(s *string) *InstitutionUpdateOne {
	if s != nil {
		iuo.SetPhone(*s)
	}
	return iuo
}

// ClearPhone clears the value of the "phone" field.
func (iuo *InstitutionUpdateOne) ClearPhone() *InstitutionUpdateOne {
	iuo.mutation.ClearPhone()
	return iuo
}

// SetIsArchived sets the "is_archived" field.
func (iuo *InstitutionUpdateOne) SetIsArchived(b bool) *InstitutionUpdateOne {
	iuo.mutation.SetIsArchived(b)
	return iuo
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (iuo *InstitutionUpdateOne) SetNillableIsArchived(b *bool) *InstitutionUpdateOne {
	if b != nil {
		iuo.SetIsArchived(*b)
	}
	return iuo
}

// SetIsVerified sets the "is_verified" field.
func (iuo *InstitutionUpdateOne) SetIsVerified(b bool) *InstitutionUpdateOne {
	iuo.mutation.SetIsVerified(b)
	return iuo
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (iuo *InstitutionUpdateOne) SetNillableIsVerified(b *bool) *InstitutionUpdateOne {
	if b != nil {
		iuo.SetIsVerified(*b)
	}
	return iuo
}

// SetCreatedAt sets the "created_at" field.
func (iuo *InstitutionUpdateOne) SetCreatedAt(t time.Time) *InstitutionUpdateOne {
	iuo.mutation.SetCreatedAt(t)
	return iuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iuo *InstitutionUpdateOne) SetNillableCreatedAt(t *time.Time) *InstitutionUpdateOne {
	if t != nil {
		iuo.SetCreatedAt(*t)
	}
	return iuo
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *InstitutionUpdateOne) SetUpdatedAt(t time.Time) *InstitutionUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iuo *InstitutionUpdateOne) SetNillableUpdatedAt(t *time.Time) *InstitutionUpdateOne {
	if t != nil {
		iuo.SetUpdatedAt(*t)
	}
	return iuo
}

// SetArchivedAt sets the "archived_at" field.
func (iuo *InstitutionUpdateOne) SetArchivedAt(t time.Time) *InstitutionUpdateOne {
	iuo.mutation.SetArchivedAt(t)
	return iuo
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (iuo *InstitutionUpdateOne) SetNillableArchivedAt(t *time.Time) *InstitutionUpdateOne {
	if t != nil {
		iuo.SetArchivedAt(*t)
	}
	return iuo
}

// SetVerifiedAt sets the "verified_at" field.
func (iuo *InstitutionUpdateOne) SetVerifiedAt(t time.Time) *InstitutionUpdateOne {
	iuo.mutation.SetVerifiedAt(t)
	return iuo
}

// SetNillableVerifiedAt sets the "verified_at" field if the given value is not nil.
func (iuo *InstitutionUpdateOne) SetNillableVerifiedAt(t *time.Time) *InstitutionUpdateOne {
	if t != nil {
		iuo.SetVerifiedAt(*t)
	}
	return iuo
}

// SetOtp sets the "otp" field.
func (iuo *InstitutionUpdateOne) SetOtp(i int64) *InstitutionUpdateOne {
	iuo.mutation.ResetOtp()
	iuo.mutation.SetOtp(i)
	return iuo
}

// SetNillableOtp sets the "otp" field if the given value is not nil.
func (iuo *InstitutionUpdateOne) SetNillableOtp(i *int64) *InstitutionUpdateOne {
	if i != nil {
		iuo.SetOtp(*i)
	}
	return iuo
}

// AddOtp adds i to the "otp" field.
func (iuo *InstitutionUpdateOne) AddOtp(i int64) *InstitutionUpdateOne {
	iuo.mutation.AddOtp(i)
	return iuo
}

// AddRecordaccesIDs adds the "recordaccess" edge to the RecordAccess entity by IDs.
func (iuo *InstitutionUpdateOne) AddRecordaccesIDs(ids ...uuid.UUID) *InstitutionUpdateOne {
	iuo.mutation.AddRecordaccesIDs(ids...)
	return iuo
}

// AddRecordaccess adds the "recordaccess" edges to the RecordAccess entity.
func (iuo *InstitutionUpdateOne) AddRecordaccess(r ...*RecordAccess) *InstitutionUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iuo.AddRecordaccesIDs(ids...)
}

// AddDoctorIDs adds the "doctor" edge to the User entity by IDs.
func (iuo *InstitutionUpdateOne) AddDoctorIDs(ids ...uuid.UUID) *InstitutionUpdateOne {
	iuo.mutation.AddDoctorIDs(ids...)
	return iuo
}

// AddDoctor adds the "doctor" edges to the User entity.
func (iuo *InstitutionUpdateOne) AddDoctor(u ...*User) *InstitutionUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return iuo.AddDoctorIDs(ids...)
}

// AddMedicalrecordIDs adds the "medicalrecord" edge to the MedicalRecord entity by IDs.
func (iuo *InstitutionUpdateOne) AddMedicalrecordIDs(ids ...uuid.UUID) *InstitutionUpdateOne {
	iuo.mutation.AddMedicalrecordIDs(ids...)
	return iuo
}

// AddMedicalrecord adds the "medicalrecord" edges to the MedicalRecord entity.
func (iuo *InstitutionUpdateOne) AddMedicalrecord(m ...*MedicalRecord) *InstitutionUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return iuo.AddMedicalrecordIDs(ids...)
}

// Mutation returns the InstitutionMutation object of the builder.
func (iuo *InstitutionUpdateOne) Mutation() *InstitutionMutation {
	return iuo.mutation
}

// ClearRecordaccess clears all "recordaccess" edges to the RecordAccess entity.
func (iuo *InstitutionUpdateOne) ClearRecordaccess() *InstitutionUpdateOne {
	iuo.mutation.ClearRecordaccess()
	return iuo
}

// RemoveRecordaccesIDs removes the "recordaccess" edge to RecordAccess entities by IDs.
func (iuo *InstitutionUpdateOne) RemoveRecordaccesIDs(ids ...uuid.UUID) *InstitutionUpdateOne {
	iuo.mutation.RemoveRecordaccesIDs(ids...)
	return iuo
}

// RemoveRecordaccess removes "recordaccess" edges to RecordAccess entities.
func (iuo *InstitutionUpdateOne) RemoveRecordaccess(r ...*RecordAccess) *InstitutionUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iuo.RemoveRecordaccesIDs(ids...)
}

// ClearDoctor clears all "doctor" edges to the User entity.
func (iuo *InstitutionUpdateOne) ClearDoctor() *InstitutionUpdateOne {
	iuo.mutation.ClearDoctor()
	return iuo
}

// RemoveDoctorIDs removes the "doctor" edge to User entities by IDs.
func (iuo *InstitutionUpdateOne) RemoveDoctorIDs(ids ...uuid.UUID) *InstitutionUpdateOne {
	iuo.mutation.RemoveDoctorIDs(ids...)
	return iuo
}

// RemoveDoctor removes "doctor" edges to User entities.
func (iuo *InstitutionUpdateOne) RemoveDoctor(u ...*User) *InstitutionUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return iuo.RemoveDoctorIDs(ids...)
}

// ClearMedicalrecord clears all "medicalrecord" edges to the MedicalRecord entity.
func (iuo *InstitutionUpdateOne) ClearMedicalrecord() *InstitutionUpdateOne {
	iuo.mutation.ClearMedicalrecord()
	return iuo
}

// RemoveMedicalrecordIDs removes the "medicalrecord" edge to MedicalRecord entities by IDs.
func (iuo *InstitutionUpdateOne) RemoveMedicalrecordIDs(ids ...uuid.UUID) *InstitutionUpdateOne {
	iuo.mutation.RemoveMedicalrecordIDs(ids...)
	return iuo
}

// RemoveMedicalrecord removes "medicalrecord" edges to MedicalRecord entities.
func (iuo *InstitutionUpdateOne) RemoveMedicalrecord(m ...*MedicalRecord) *InstitutionUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return iuo.RemoveMedicalrecordIDs(ids...)
}

// Where appends a list predicates to the InstitutionUpdate builder.
func (iuo *InstitutionUpdateOne) Where(ps ...predicate.Institution) *InstitutionUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InstitutionUpdateOne) Select(field string, fields ...string) *InstitutionUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Institution entity.
func (iuo *InstitutionUpdateOne) Save(ctx context.Context) (*Institution, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InstitutionUpdateOne) SaveX(ctx context.Context) *Institution {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InstitutionUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InstitutionUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *InstitutionUpdateOne) sqlSave(ctx context.Context) (_node *Institution, err error) {
	_spec := sqlgraph.NewUpdateSpec(institution.Table, institution.Columns, sqlgraph.NewFieldSpec(institution.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Institution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, institution.FieldID)
		for _, f := range fields {
			if !institution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != institution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(institution.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Description(); ok {
		_spec.SetField(institution.FieldDescription, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Location(); ok {
		_spec.SetField(institution.FieldLocation, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Email(); ok {
		_spec.SetField(institution.FieldEmail, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Password(); ok {
		_spec.SetField(institution.FieldPassword, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Phone(); ok {
		_spec.SetField(institution.FieldPhone, field.TypeString, value)
	}
	if iuo.mutation.PhoneCleared() {
		_spec.ClearField(institution.FieldPhone, field.TypeString)
	}
	if value, ok := iuo.mutation.IsArchived(); ok {
		_spec.SetField(institution.FieldIsArchived, field.TypeBool, value)
	}
	if value, ok := iuo.mutation.IsVerified(); ok {
		_spec.SetField(institution.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := iuo.mutation.CreatedAt(); ok {
		_spec.SetField(institution.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(institution.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.ArchivedAt(); ok {
		_spec.SetField(institution.FieldArchivedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.VerifiedAt(); ok {
		_spec.SetField(institution.FieldVerifiedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.Otp(); ok {
		_spec.SetField(institution.FieldOtp, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedOtp(); ok {
		_spec.AddField(institution.FieldOtp, field.TypeInt64, value)
	}
	if iuo.mutation.RecordaccessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.RecordaccessTable,
			Columns: []string{institution.RecordaccessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recordaccess.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedRecordaccessIDs(); len(nodes) > 0 && !iuo.mutation.RecordaccessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.RecordaccessTable,
			Columns: []string{institution.RecordaccessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recordaccess.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RecordaccessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.RecordaccessTable,
			Columns: []string{institution.RecordaccessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recordaccess.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.DoctorTable,
			Columns: []string{institution.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedDoctorIDs(); len(nodes) > 0 && !iuo.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.DoctorTable,
			Columns: []string{institution.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.DoctorTable,
			Columns: []string{institution.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.MedicalrecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.MedicalrecordTable,
			Columns: []string{institution.MedicalrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalrecord.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedMedicalrecordIDs(); len(nodes) > 0 && !iuo.mutation.MedicalrecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.MedicalrecordTable,
			Columns: []string{institution.MedicalrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.MedicalrecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.MedicalrecordTable,
			Columns: []string{institution.MedicalrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Institution{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{institution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
