// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vector-ops/lifefolio/ent/accessrequest"
	"github.com/vector-ops/lifefolio/ent/predicate"
)

// AccessRequestUpdate is the builder for updating AccessRequest entities.
type AccessRequestUpdate struct {
	config
	hooks    []Hook
	mutation *AccessRequestMutation
}

// Where appends a list predicates to the AccessRequestUpdate builder.
func (aru *AccessRequestUpdate) Where(ps ...predicate.AccessRequest) *AccessRequestUpdate {
	aru.mutation.Where(ps...)
	return aru
}

// Mutation returns the AccessRequestMutation object of the builder.
func (aru *AccessRequestUpdate) Mutation() *AccessRequestMutation {
	return aru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *AccessRequestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aru.sqlSave, aru.mutation, aru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aru *AccessRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *AccessRequestUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *AccessRequestUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aru *AccessRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(accessrequest.Table, accessrequest.Columns, sqlgraph.NewFieldSpec(accessrequest.FieldID, field.TypeInt))
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accessrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aru.mutation.done = true
	return n, nil
}

// AccessRequestUpdateOne is the builder for updating a single AccessRequest entity.
type AccessRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccessRequestMutation
}

// Mutation returns the AccessRequestMutation object of the builder.
func (aruo *AccessRequestUpdateOne) Mutation() *AccessRequestMutation {
	return aruo.mutation
}

// Where appends a list predicates to the AccessRequestUpdate builder.
func (aruo *AccessRequestUpdateOne) Where(ps ...predicate.AccessRequest) *AccessRequestUpdateOne {
	aruo.mutation.Where(ps...)
	return aruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *AccessRequestUpdateOne) Select(field string, fields ...string) *AccessRequestUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated AccessRequest entity.
func (aruo *AccessRequestUpdateOne) Save(ctx context.Context) (*AccessRequest, error) {
	return withHooks(ctx, aruo.sqlSave, aruo.mutation, aruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *AccessRequestUpdateOne) SaveX(ctx context.Context) *AccessRequest {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *AccessRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *AccessRequestUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aruo *AccessRequestUpdateOne) sqlSave(ctx context.Context) (_node *AccessRequest, err error) {
	_spec := sqlgraph.NewUpdateSpec(accessrequest.Table, accessrequest.Columns, sqlgraph.NewFieldSpec(accessrequest.FieldID, field.TypeInt))
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccessRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accessrequest.FieldID)
		for _, f := range fields {
			if !accessrequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accessrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &AccessRequest{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accessrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aruo.mutation.done = true
	return _node, nil
}
