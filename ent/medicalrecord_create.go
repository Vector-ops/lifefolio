// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/vector-ops/lifefolio/ent/institution"
	"github.com/vector-ops/lifefolio/ent/medicalrecord"
	"github.com/vector-ops/lifefolio/ent/recordaccess"
	"github.com/vector-ops/lifefolio/ent/user"
)

// MedicalRecordCreate is the builder for creating a MedicalRecord entity.
type MedicalRecordCreate struct {
	config
	mutation *MedicalRecordMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (mrc *MedicalRecordCreate) SetUserID(u uuid.UUID) *MedicalRecordCreate {
	mrc.mutation.SetUserID(u)
	return mrc
}

// SetInstitutionID sets the "institution_id" field.
func (mrc *MedicalRecordCreate) SetInstitutionID(u uuid.UUID) *MedicalRecordCreate {
	mrc.mutation.SetInstitutionID(u)
	return mrc
}

// SetNillableInstitutionID sets the "institution_id" field if the given value is not nil.
func (mrc *MedicalRecordCreate) SetNillableInstitutionID(u *uuid.UUID) *MedicalRecordCreate {
	if u != nil {
		mrc.SetInstitutionID(*u)
	}
	return mrc
}

// SetFile sets the "file" field.
func (mrc *MedicalRecordCreate) SetFile(s string) *MedicalRecordCreate {
	mrc.mutation.SetFile(s)
	return mrc
}

// SetIsArchived sets the "is_archived" field.
func (mrc *MedicalRecordCreate) SetIsArchived(b bool) *MedicalRecordCreate {
	mrc.mutation.SetIsArchived(b)
	return mrc
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (mrc *MedicalRecordCreate) SetNillableIsArchived(b *bool) *MedicalRecordCreate {
	if b != nil {
		mrc.SetIsArchived(*b)
	}
	return mrc
}

// SetCreatedAt sets the "created_at" field.
func (mrc *MedicalRecordCreate) SetCreatedAt(t time.Time) *MedicalRecordCreate {
	mrc.mutation.SetCreatedAt(t)
	return mrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mrc *MedicalRecordCreate) SetNillableCreatedAt(t *time.Time) *MedicalRecordCreate {
	if t != nil {
		mrc.SetCreatedAt(*t)
	}
	return mrc
}

// SetUpdatedAt sets the "updated_at" field.
func (mrc *MedicalRecordCreate) SetUpdatedAt(t time.Time) *MedicalRecordCreate {
	mrc.mutation.SetUpdatedAt(t)
	return mrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mrc *MedicalRecordCreate) SetNillableUpdatedAt(t *time.Time) *MedicalRecordCreate {
	if t != nil {
		mrc.SetUpdatedAt(*t)
	}
	return mrc
}

// SetArchivedAt sets the "archived_at" field.
func (mrc *MedicalRecordCreate) SetArchivedAt(t time.Time) *MedicalRecordCreate {
	mrc.mutation.SetArchivedAt(t)
	return mrc
}

// SetID sets the "id" field.
func (mrc *MedicalRecordCreate) SetID(u uuid.UUID) *MedicalRecordCreate {
	mrc.mutation.SetID(u)
	return mrc
}

// SetUser sets the "user" edge to the User entity.
func (mrc *MedicalRecordCreate) SetUser(u *User) *MedicalRecordCreate {
	return mrc.SetUserID(u.ID)
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (mrc *MedicalRecordCreate) SetInstitution(i *Institution) *MedicalRecordCreate {
	return mrc.SetInstitutionID(i.ID)
}

// AddRecordaccesIDs adds the "recordaccess" edge to the RecordAccess entity by IDs.
func (mrc *MedicalRecordCreate) AddRecordaccesIDs(ids ...uuid.UUID) *MedicalRecordCreate {
	mrc.mutation.AddRecordaccesIDs(ids...)
	return mrc
}

// AddRecordaccess adds the "recordaccess" edges to the RecordAccess entity.
func (mrc *MedicalRecordCreate) AddRecordaccess(r ...*RecordAccess) *MedicalRecordCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mrc.AddRecordaccesIDs(ids...)
}

// Mutation returns the MedicalRecordMutation object of the builder.
func (mrc *MedicalRecordCreate) Mutation() *MedicalRecordMutation {
	return mrc.mutation
}

// Save creates the MedicalRecord in the database.
func (mrc *MedicalRecordCreate) Save(ctx context.Context) (*MedicalRecord, error) {
	mrc.defaults()
	return withHooks(ctx, mrc.sqlSave, mrc.mutation, mrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mrc *MedicalRecordCreate) SaveX(ctx context.Context) *MedicalRecord {
	v, err := mrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mrc *MedicalRecordCreate) Exec(ctx context.Context) error {
	_, err := mrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrc *MedicalRecordCreate) ExecX(ctx context.Context) {
	if err := mrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mrc *MedicalRecordCreate) defaults() {
	if _, ok := mrc.mutation.IsArchived(); !ok {
		v := medicalrecord.DefaultIsArchived
		mrc.mutation.SetIsArchived(v)
	}
	if _, ok := mrc.mutation.CreatedAt(); !ok {
		v := medicalrecord.DefaultCreatedAt()
		mrc.mutation.SetCreatedAt(v)
	}
	if _, ok := mrc.mutation.UpdatedAt(); !ok {
		v := medicalrecord.DefaultUpdatedAt()
		mrc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mrc *MedicalRecordCreate) check() error {
	if _, ok := mrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "MedicalRecord.user_id"`)}
	}
	if _, ok := mrc.mutation.File(); !ok {
		return &ValidationError{Name: "file", err: errors.New(`ent: missing required field "MedicalRecord.file"`)}
	}
	if _, ok := mrc.mutation.IsArchived(); !ok {
		return &ValidationError{Name: "is_archived", err: errors.New(`ent: missing required field "MedicalRecord.is_archived"`)}
	}
	if _, ok := mrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MedicalRecord.created_at"`)}
	}
	if _, ok := mrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MedicalRecord.updated_at"`)}
	}
	if _, ok := mrc.mutation.ArchivedAt(); !ok {
		return &ValidationError{Name: "archived_at", err: errors.New(`ent: missing required field "MedicalRecord.archived_at"`)}
	}
	if len(mrc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "MedicalRecord.user"`)}
	}
	return nil
}

func (mrc *MedicalRecordCreate) sqlSave(ctx context.Context) (*MedicalRecord, error) {
	if err := mrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mrc.mutation.id = &_node.ID
	mrc.mutation.done = true
	return _node, nil
}

func (mrc *MedicalRecordCreate) createSpec() (*MedicalRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &MedicalRecord{config: mrc.config}
		_spec = sqlgraph.NewCreateSpec(medicalrecord.Table, sqlgraph.NewFieldSpec(medicalrecord.FieldID, field.TypeUUID))
	)
	if id, ok := mrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mrc.mutation.File(); ok {
		_spec.SetField(medicalrecord.FieldFile, field.TypeString, value)
		_node.File = value
	}
	if value, ok := mrc.mutation.IsArchived(); ok {
		_spec.SetField(medicalrecord.FieldIsArchived, field.TypeBool, value)
		_node.IsArchived = value
	}
	if value, ok := mrc.mutation.CreatedAt(); ok {
		_spec.SetField(medicalrecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mrc.mutation.UpdatedAt(); ok {
		_spec.SetField(medicalrecord.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mrc.mutation.ArchivedAt(); ok {
		_spec.SetField(medicalrecord.FieldArchivedAt, field.TypeTime, value)
		_node.ArchivedAt = &value
	}
	if nodes := mrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalrecord.UserTable,
			Columns: []string{medicalrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mrc.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalrecord.InstitutionTable,
			Columns: []string{medicalrecord.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InstitutionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mrc.mutation.RecordaccessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalrecord.RecordaccessTable,
			Columns: []string{medicalrecord.RecordaccessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recordaccess.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MedicalRecordCreateBulk is the builder for creating many MedicalRecord entities in bulk.
type MedicalRecordCreateBulk struct {
	config
	err      error
	builders []*MedicalRecordCreate
}

// Save creates the MedicalRecord entities in the database.
func (mrcb *MedicalRecordCreateBulk) Save(ctx context.Context) ([]*MedicalRecord, error) {
	if mrcb.err != nil {
		return nil, mrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mrcb.builders))
	nodes := make([]*MedicalRecord, len(mrcb.builders))
	mutators := make([]Mutator, len(mrcb.builders))
	for i := range mrcb.builders {
		func(i int, root context.Context) {
			builder := mrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MedicalRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mrcb *MedicalRecordCreateBulk) SaveX(ctx context.Context) []*MedicalRecord {
	v, err := mrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mrcb *MedicalRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := mrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrcb *MedicalRecordCreateBulk) ExecX(ctx context.Context) {
	if err := mrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
