// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/vector-ops/lifefolio/ent/institution"
	"github.com/vector-ops/lifefolio/ent/medicalrecord"
	"github.com/vector-ops/lifefolio/ent/recordaccess"
)

// RecordAccess is the model entity for the RecordAccess schema.
type RecordAccess struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// RecordID holds the value of the "record_id" field.
	RecordID uuid.UUID `json:"record_id,omitempty"`
	// InstitutionID holds the value of the "institution_id" field.
	InstitutionID uuid.UUID `json:"institution_id,omitempty"`
	// Approved holds the value of the "approved" field.
	Approved bool `json:"approved,omitempty"`
	// ApprovedAt holds the value of the "approved_at" field.
	ApprovedAt *time.Time `json:"approved_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecordAccessQuery when eager-loading is set.
	Edges        RecordAccessEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RecordAccessEdges holds the relations/edges for other nodes in the graph.
type RecordAccessEdges struct {
	// Medicalrecord holds the value of the medicalrecord edge.
	Medicalrecord *MedicalRecord `json:"medicalrecord,omitempty"`
	// Institution holds the value of the institution edge.
	Institution *Institution `json:"institution,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MedicalrecordOrErr returns the Medicalrecord value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecordAccessEdges) MedicalrecordOrErr() (*MedicalRecord, error) {
	if e.Medicalrecord != nil {
		return e.Medicalrecord, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: medicalrecord.Label}
	}
	return nil, &NotLoadedError{edge: "medicalrecord"}
}

// InstitutionOrErr returns the Institution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecordAccessEdges) InstitutionOrErr() (*Institution, error) {
	if e.Institution != nil {
		return e.Institution, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: institution.Label}
	}
	return nil, &NotLoadedError{edge: "institution"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RecordAccess) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case recordaccess.FieldApproved:
			values[i] = new(sql.NullBool)
		case recordaccess.FieldApprovedAt:
			values[i] = new(sql.NullTime)
		case recordaccess.FieldID, recordaccess.FieldRecordID, recordaccess.FieldInstitutionID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RecordAccess fields.
func (ra *RecordAccess) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recordaccess.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ra.ID = *value
			}
		case recordaccess.FieldRecordID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field record_id", values[i])
			} else if value != nil {
				ra.RecordID = *value
			}
		case recordaccess.FieldInstitutionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field institution_id", values[i])
			} else if value != nil {
				ra.InstitutionID = *value
			}
		case recordaccess.FieldApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field approved", values[i])
			} else if value.Valid {
				ra.Approved = value.Bool
			}
		case recordaccess.FieldApprovedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field approved_at", values[i])
			} else if value.Valid {
				ra.ApprovedAt = new(time.Time)
				*ra.ApprovedAt = value.Time
			}
		default:
			ra.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RecordAccess.
// This includes values selected through modifiers, order, etc.
func (ra *RecordAccess) Value(name string) (ent.Value, error) {
	return ra.selectValues.Get(name)
}

// QueryMedicalrecord queries the "medicalrecord" edge of the RecordAccess entity.
func (ra *RecordAccess) QueryMedicalrecord() *MedicalRecordQuery {
	return NewRecordAccessClient(ra.config).QueryMedicalrecord(ra)
}

// QueryInstitution queries the "institution" edge of the RecordAccess entity.
func (ra *RecordAccess) QueryInstitution() *InstitutionQuery {
	return NewRecordAccessClient(ra.config).QueryInstitution(ra)
}

// Update returns a builder for updating this RecordAccess.
// Note that you need to call RecordAccess.Unwrap() before calling this method if this RecordAccess
// was returned from a transaction, and the transaction was committed or rolled back.
func (ra *RecordAccess) Update() *RecordAccessUpdateOne {
	return NewRecordAccessClient(ra.config).UpdateOne(ra)
}

// Unwrap unwraps the RecordAccess entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ra *RecordAccess) Unwrap() *RecordAccess {
	_tx, ok := ra.config.driver.(*txDriver)
	if !ok {
		panic("ent: RecordAccess is not a transactional entity")
	}
	ra.config.driver = _tx.drv
	return ra
}

// String implements the fmt.Stringer.
func (ra *RecordAccess) String() string {
	var builder strings.Builder
	builder.WriteString("RecordAccess(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ra.ID))
	builder.WriteString("record_id=")
	builder.WriteString(fmt.Sprintf("%v", ra.RecordID))
	builder.WriteString(", ")
	builder.WriteString("institution_id=")
	builder.WriteString(fmt.Sprintf("%v", ra.InstitutionID))
	builder.WriteString(", ")
	builder.WriteString("approved=")
	builder.WriteString(fmt.Sprintf("%v", ra.Approved))
	builder.WriteString(", ")
	if v := ra.ApprovedAt; v != nil {
		builder.WriteString("approved_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// RecordAccesses is a parsable slice of RecordAccess.
type RecordAccesses []*RecordAccess
