// Code generated by ent, DO NOT EDIT.

package recordaccess

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/vector-ops/lifefolio/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldLTE(FieldID, id))
}

// Approved applies equality check predicate on the "approved" field. It's identical to ApprovedEQ.
func Approved(v bool) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldEQ(FieldApproved, v))
}

// ApprovedAt applies equality check predicate on the "approved_at" field. It's identical to ApprovedAtEQ.
func ApprovedAt(v time.Time) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldEQ(FieldApprovedAt, v))
}

// ApprovedEQ applies the EQ predicate on the "approved" field.
func ApprovedEQ(v bool) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldEQ(FieldApproved, v))
}

// ApprovedNEQ applies the NEQ predicate on the "approved" field.
func ApprovedNEQ(v bool) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldNEQ(FieldApproved, v))
}

// ApprovedAtEQ applies the EQ predicate on the "approved_at" field.
func ApprovedAtEQ(v time.Time) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldEQ(FieldApprovedAt, v))
}

// ApprovedAtNEQ applies the NEQ predicate on the "approved_at" field.
func ApprovedAtNEQ(v time.Time) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldNEQ(FieldApprovedAt, v))
}

// ApprovedAtIn applies the In predicate on the "approved_at" field.
func ApprovedAtIn(vs ...time.Time) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldIn(FieldApprovedAt, vs...))
}

// ApprovedAtNotIn applies the NotIn predicate on the "approved_at" field.
func ApprovedAtNotIn(vs ...time.Time) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldNotIn(FieldApprovedAt, vs...))
}

// ApprovedAtGT applies the GT predicate on the "approved_at" field.
func ApprovedAtGT(v time.Time) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldGT(FieldApprovedAt, v))
}

// ApprovedAtGTE applies the GTE predicate on the "approved_at" field.
func ApprovedAtGTE(v time.Time) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldGTE(FieldApprovedAt, v))
}

// ApprovedAtLT applies the LT predicate on the "approved_at" field.
func ApprovedAtLT(v time.Time) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldLT(FieldApprovedAt, v))
}

// ApprovedAtLTE applies the LTE predicate on the "approved_at" field.
func ApprovedAtLTE(v time.Time) predicate.RecordAccess {
	return predicate.RecordAccess(sql.FieldLTE(FieldApprovedAt, v))
}

// HasMedicalrecord applies the HasEdge predicate on the "medicalrecord" edge.
func HasMedicalrecord() predicate.RecordAccess {
	return predicate.RecordAccess(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MedicalrecordTable, MedicalrecordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMedicalrecordWith applies the HasEdge predicate on the "medicalrecord" edge with a given conditions (other predicates).
func HasMedicalrecordWith(preds ...predicate.MedicalRecord) predicate.RecordAccess {
	return predicate.RecordAccess(func(s *sql.Selector) {
		step := newMedicalrecordStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInstitution applies the HasEdge predicate on the "institution" edge.
func HasInstitution() predicate.RecordAccess {
	return predicate.RecordAccess(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InstitutionTable, InstitutionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInstitutionWith applies the HasEdge predicate on the "institution" edge with a given conditions (other predicates).
func HasInstitutionWith(preds ...predicate.Institution) predicate.RecordAccess {
	return predicate.RecordAccess(func(s *sql.Selector) {
		step := newInstitutionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RecordAccess) predicate.RecordAccess {
	return predicate.RecordAccess(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RecordAccess) predicate.RecordAccess {
	return predicate.RecordAccess(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RecordAccess) predicate.RecordAccess {
	return predicate.RecordAccess(sql.NotPredicates(p))
}
