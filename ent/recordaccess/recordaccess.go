// Code generated by ent, DO NOT EDIT.

package recordaccess

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the recordaccess type in the database.
	Label = "record_access"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRecordID holds the string denoting the record_id field in the database.
	FieldRecordID = "record_id"
	// FieldInstitutionID holds the string denoting the institution_id field in the database.
	FieldInstitutionID = "institution_id"
	// FieldApproved holds the string denoting the approved field in the database.
	FieldApproved = "approved"
	// FieldApprovedAt holds the string denoting the approved_at field in the database.
	FieldApprovedAt = "approved_at"
	// EdgeMedicalrecord holds the string denoting the medicalrecord edge name in mutations.
	EdgeMedicalrecord = "medicalrecord"
	// EdgeInstitution holds the string denoting the institution edge name in mutations.
	EdgeInstitution = "institution"
	// Table holds the table name of the recordaccess in the database.
	Table = "record_accesses"
	// MedicalrecordTable is the table that holds the medicalrecord relation/edge.
	MedicalrecordTable = "record_accesses"
	// MedicalrecordInverseTable is the table name for the MedicalRecord entity.
	// It exists in this package in order to avoid circular dependency with the "medicalrecord" package.
	MedicalrecordInverseTable = "medical_records"
	// MedicalrecordColumn is the table column denoting the medicalrecord relation/edge.
	MedicalrecordColumn = "record_id"
	// InstitutionTable is the table that holds the institution relation/edge.
	InstitutionTable = "record_accesses"
	// InstitutionInverseTable is the table name for the Institution entity.
	// It exists in this package in order to avoid circular dependency with the "institution" package.
	InstitutionInverseTable = "institutions"
	// InstitutionColumn is the table column denoting the institution relation/edge.
	InstitutionColumn = "institution_id"
)

// Columns holds all SQL columns for recordaccess fields.
var Columns = []string{
	FieldID,
	FieldRecordID,
	FieldInstitutionID,
	FieldApproved,
	FieldApprovedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultApproved holds the default value on creation for the "approved" field.
	DefaultApproved bool
)

// OrderOption defines the ordering options for the RecordAccess queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRecordID orders the results by the record_id field.
func ByRecordID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecordID, opts...).ToFunc()
}

// ByInstitutionID orders the results by the institution_id field.
func ByInstitutionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstitutionID, opts...).ToFunc()
}

// ByApproved orders the results by the approved field.
func ByApproved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproved, opts...).ToFunc()
}

// ByApprovedAt orders the results by the approved_at field.
func ByApprovedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovedAt, opts...).ToFunc()
}

// ByMedicalrecordField orders the results by medicalrecord field.
func ByMedicalrecordField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMedicalrecordStep(), sql.OrderByField(field, opts...))
	}
}

// ByInstitutionField orders the results by institution field.
func ByInstitutionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInstitutionStep(), sql.OrderByField(field, opts...))
	}
}
func newMedicalrecordStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MedicalrecordInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MedicalrecordTable, MedicalrecordColumn),
	)
}
func newInstitutionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InstitutionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InstitutionTable, InstitutionColumn),
	)
}
