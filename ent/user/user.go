// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFirstName holds the string denoting the firstname field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the lastname field in the database.
	FieldLastName = "last_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldDOB holds the string denoting the dob field in the database.
	FieldDOB = "dob"
	// FieldBloodGroup holds the string denoting the bloodgroup field in the database.
	FieldBloodGroup = "blood_group"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldIsArchived holds the string denoting the isarchived field in the database.
	FieldIsArchived = "is_archived"
	// FieldIsVerified holds the string denoting the isverified field in the database.
	FieldIsVerified = "is_verified"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldArchivedAt holds the string denoting the archivedat field in the database.
	FieldArchivedAt = "archived_at"
	// FieldVerifiedAt holds the string denoting the verifiedat field in the database.
	FieldVerifiedAt = "verified_at"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldFirstName,
	FieldLastName,
	FieldEmail,
	FieldPassword,
	FieldDOB,
	FieldBloodGroup,
	FieldWeight,
	FieldHeight,
	FieldIsArchived,
	FieldIsVerified,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldArchivedAt,
	FieldVerifiedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// FirstNameValidator is a validator for the "firstName" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// LastNameValidator is a validator for the "lastName" field. It is called by the builders before save.
	LastNameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultDOB holds the default value on creation for the "DOB" field.
	DefaultDOB time.Time
	// DefaultIsArchived holds the default value on creation for the "isArchived" field.
	DefaultIsArchived bool
	// DefaultIsVerified holds the default value on creation for the "isVerified" field.
	DefaultIsVerified bool
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt time.Time
)

// BloodGroup defines the type for the "bloodGroup" enum field.
type BloodGroup string

// BloodGroup values.
const (
	BloodGroupAPOS  BloodGroup = "APOS"
	BloodGroupANEG  BloodGroup = "ANEG"
	BloodGroupBPOS  BloodGroup = "BPOS"
	BloodGroupBNEG  BloodGroup = "BNEG"
	BloodGroupABPOS BloodGroup = "ABPOS"
	BloodGroupABNEG BloodGroup = "ABNEG"
	BloodGroupOPOS  BloodGroup = "OPOS"
	BloodGroupONEG  BloodGroup = "ONEG"
)

func (bg BloodGroup) String() string {
	return string(bg)
}

// BloodGroupValidator is a validator for the "bloodGroup" field enum values. It is called by the builders before save.
func BloodGroupValidator(bg BloodGroup) error {
	switch bg {
	case BloodGroupAPOS, BloodGroupANEG, BloodGroupBPOS, BloodGroupBNEG, BloodGroupABPOS, BloodGroupABNEG, BloodGroupOPOS, BloodGroupONEG:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for bloodGroup field: %q", bg)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFirstName orders the results by the firstName field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the lastName field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByDOB orders the results by the DOB field.
func ByDOB(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDOB, opts...).ToFunc()
}

// ByBloodGroup orders the results by the bloodGroup field.
func ByBloodGroup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBloodGroup, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByHeight orders the results by the height field.
func ByHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeight, opts...).ToFunc()
}

// ByIsArchived orders the results by the isArchived field.
func ByIsArchived(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsArchived, opts...).ToFunc()
}

// ByIsVerified orders the results by the isVerified field.
func ByIsVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsVerified, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByArchivedAt orders the results by the archivedAt field.
func ByArchivedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchivedAt, opts...).ToFunc()
}

// ByVerifiedAt orders the results by the verifiedAt field.
func ByVerifiedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedAt, opts...).ToFunc()
}
