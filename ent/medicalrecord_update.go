// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/vector-ops/lifefolio/ent/institution"
	"github.com/vector-ops/lifefolio/ent/medicalrecord"
	"github.com/vector-ops/lifefolio/ent/predicate"
	"github.com/vector-ops/lifefolio/ent/recordaccess"
	"github.com/vector-ops/lifefolio/ent/user"
)

// MedicalRecordUpdate is the builder for updating MedicalRecord entities.
type MedicalRecordUpdate struct {
	config
	hooks    []Hook
	mutation *MedicalRecordMutation
}

// Where appends a list predicates to the MedicalRecordUpdate builder.
func (mru *MedicalRecordUpdate) Where(ps ...predicate.MedicalRecord) *MedicalRecordUpdate {
	mru.mutation.Where(ps...)
	return mru
}

// SetUserID sets the "user_id" field.
func (mru *MedicalRecordUpdate) SetUserID(u uuid.UUID) *MedicalRecordUpdate {
	mru.mutation.SetUserID(u)
	return mru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillableUserID(u *uuid.UUID) *MedicalRecordUpdate {
	if u != nil {
		mru.SetUserID(*u)
	}
	return mru
}

// SetInstitutionID sets the "institution_id" field.
func (mru *MedicalRecordUpdate) SetInstitutionID(u uuid.UUID) *MedicalRecordUpdate {
	mru.mutation.SetInstitutionID(u)
	return mru
}

// SetNillableInstitutionID sets the "institution_id" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillableInstitutionID(u *uuid.UUID) *MedicalRecordUpdate {
	if u != nil {
		mru.SetInstitutionID(*u)
	}
	return mru
}

// ClearInstitutionID clears the value of the "institution_id" field.
func (mru *MedicalRecordUpdate) ClearInstitutionID() *MedicalRecordUpdate {
	mru.mutation.ClearInstitutionID()
	return mru
}

// SetFile sets the "file" field.
func (mru *MedicalRecordUpdate) SetFile(s string) *MedicalRecordUpdate {
	mru.mutation.SetFile(s)
	return mru
}

// SetNillableFile sets the "file" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillableFile(s *string) *MedicalRecordUpdate {
	if s != nil {
		mru.SetFile(*s)
	}
	return mru
}

// SetIsArchived sets the "is_archived" field.
func (mru *MedicalRecordUpdate) SetIsArchived(b bool) *MedicalRecordUpdate {
	mru.mutation.SetIsArchived(b)
	return mru
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillableIsArchived(b *bool) *MedicalRecordUpdate {
	if b != nil {
		mru.SetIsArchived(*b)
	}
	return mru
}

// SetCreatedAt sets the "created_at" field.
func (mru *MedicalRecordUpdate) SetCreatedAt(t time.Time) *MedicalRecordUpdate {
	mru.mutation.SetCreatedAt(t)
	return mru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillableCreatedAt(t *time.Time) *MedicalRecordUpdate {
	if t != nil {
		mru.SetCreatedAt(*t)
	}
	return mru
}

// SetUpdatedAt sets the "updated_at" field.
func (mru *MedicalRecordUpdate) SetUpdatedAt(t time.Time) *MedicalRecordUpdate {
	mru.mutation.SetUpdatedAt(t)
	return mru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillableUpdatedAt(t *time.Time) *MedicalRecordUpdate {
	if t != nil {
		mru.SetUpdatedAt(*t)
	}
	return mru
}

// SetArchivedAt sets the "archived_at" field.
func (mru *MedicalRecordUpdate) SetArchivedAt(t time.Time) *MedicalRecordUpdate {
	mru.mutation.SetArchivedAt(t)
	return mru
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillableArchivedAt(t *time.Time) *MedicalRecordUpdate {
	if t != nil {
		mru.SetArchivedAt(*t)
	}
	return mru
}

// SetUser sets the "user" edge to the User entity.
func (mru *MedicalRecordUpdate) SetUser(u *User) *MedicalRecordUpdate {
	return mru.SetUserID(u.ID)
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (mru *MedicalRecordUpdate) SetInstitution(i *Institution) *MedicalRecordUpdate {
	return mru.SetInstitutionID(i.ID)
}

// AddRecordaccesIDs adds the "recordaccess" edge to the RecordAccess entity by IDs.
func (mru *MedicalRecordUpdate) AddRecordaccesIDs(ids ...uuid.UUID) *MedicalRecordUpdate {
	mru.mutation.AddRecordaccesIDs(ids...)
	return mru
}

// AddRecordaccess adds the "recordaccess" edges to the RecordAccess entity.
func (mru *MedicalRecordUpdate) AddRecordaccess(r ...*RecordAccess) *MedicalRecordUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mru.AddRecordaccesIDs(ids...)
}

// Mutation returns the MedicalRecordMutation object of the builder.
func (mru *MedicalRecordUpdate) Mutation() *MedicalRecordMutation {
	return mru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mru *MedicalRecordUpdate) ClearUser() *MedicalRecordUpdate {
	mru.mutation.ClearUser()
	return mru
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (mru *MedicalRecordUpdate) ClearInstitution() *MedicalRecordUpdate {
	mru.mutation.ClearInstitution()
	return mru
}

// ClearRecordaccess clears all "recordaccess" edges to the RecordAccess entity.
func (mru *MedicalRecordUpdate) ClearRecordaccess() *MedicalRecordUpdate {
	mru.mutation.ClearRecordaccess()
	return mru
}

// RemoveRecordaccesIDs removes the "recordaccess" edge to RecordAccess entities by IDs.
func (mru *MedicalRecordUpdate) RemoveRecordaccesIDs(ids ...uuid.UUID) *MedicalRecordUpdate {
	mru.mutation.RemoveRecordaccesIDs(ids...)
	return mru
}

// RemoveRecordaccess removes "recordaccess" edges to RecordAccess entities.
func (mru *MedicalRecordUpdate) RemoveRecordaccess(r ...*RecordAccess) *MedicalRecordUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mru.RemoveRecordaccesIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mru *MedicalRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mru.sqlSave, mru.mutation, mru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mru *MedicalRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := mru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mru *MedicalRecordUpdate) Exec(ctx context.Context) error {
	_, err := mru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mru *MedicalRecordUpdate) ExecX(ctx context.Context) {
	if err := mru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mru *MedicalRecordUpdate) check() error {
	if mru.mutation.UserCleared() && len(mru.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MedicalRecord.user"`)
	}
	return nil
}

func (mru *MedicalRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(medicalrecord.Table, medicalrecord.Columns, sqlgraph.NewFieldSpec(medicalrecord.FieldID, field.TypeUUID))
	if ps := mru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mru.mutation.File(); ok {
		_spec.SetField(medicalrecord.FieldFile, field.TypeString, value)
	}
	if value, ok := mru.mutation.IsArchived(); ok {
		_spec.SetField(medicalrecord.FieldIsArchived, field.TypeBool, value)
	}
	if value, ok := mru.mutation.CreatedAt(); ok {
		_spec.SetField(medicalrecord.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mru.mutation.UpdatedAt(); ok {
		_spec.SetField(medicalrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mru.mutation.ArchivedAt(); ok {
		_spec.SetField(medicalrecord.FieldArchivedAt, field.TypeTime, value)
	}
	if mru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalrecord.UserTable,
			Columns: []string{medicalrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalrecord.UserTable,
			Columns: []string{medicalrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mru.mutation.InstitutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalrecord.InstitutionTable,
			Columns: []string{medicalrecord.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mru.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalrecord.InstitutionTable,
			Columns: []string{medicalrecord.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mru.mutation.RecordaccessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalrecord.RecordaccessTable,
			Columns: []string{medicalrecord.RecordaccessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recordaccess.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mru.mutation.RemovedRecordaccessIDs(); len(nodes) > 0 && !mru.mutation.RecordaccessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalrecord.RecordaccessTable,
			Columns: []string{medicalrecord.RecordaccessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recordaccess.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mru.mutation.RecordaccessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalrecord.RecordaccessTable,
			Columns: []string{medicalrecord.RecordaccessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recordaccess.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mru.mutation.done = true
	return n, nil
}

// MedicalRecordUpdateOne is the builder for updating a single MedicalRecord entity.
type MedicalRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MedicalRecordMutation
}

// SetUserID sets the "user_id" field.
func (mruo *MedicalRecordUpdateOne) SetUserID(u uuid.UUID) *MedicalRecordUpdateOne {
	mruo.mutation.SetUserID(u)
	return mruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillableUserID(u *uuid.UUID) *MedicalRecordUpdateOne {
	if u != nil {
		mruo.SetUserID(*u)
	}
	return mruo
}

// SetInstitutionID sets the "institution_id" field.
func (mruo *MedicalRecordUpdateOne) SetInstitutionID(u uuid.UUID) *MedicalRecordUpdateOne {
	mruo.mutation.SetInstitutionID(u)
	return mruo
}

// SetNillableInstitutionID sets the "institution_id" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillableInstitutionID(u *uuid.UUID) *MedicalRecordUpdateOne {
	if u != nil {
		mruo.SetInstitutionID(*u)
	}
	return mruo
}

// ClearInstitutionID clears the value of the "institution_id" field.
func (mruo *MedicalRecordUpdateOne) ClearInstitutionID() *MedicalRecordUpdateOne {
	mruo.mutation.ClearInstitutionID()
	return mruo
}

// SetFile sets the "file" field.
func (mruo *MedicalRecordUpdateOne) SetFile(s string) *MedicalRecordUpdateOne {
	mruo.mutation.SetFile(s)
	return mruo
}

// SetNillableFile sets the "file" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillableFile(s *string) *MedicalRecordUpdateOne {
	if s != nil {
		mruo.SetFile(*s)
	}
	return mruo
}

// SetIsArchived sets the "is_archived" field.
func (mruo *MedicalRecordUpdateOne) SetIsArchived(b bool) *MedicalRecordUpdateOne {
	mruo.mutation.SetIsArchived(b)
	return mruo
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillableIsArchived(b *bool) *MedicalRecordUpdateOne {
	if b != nil {
		mruo.SetIsArchived(*b)
	}
	return mruo
}

// SetCreatedAt sets the "created_at" field.
func (mruo *MedicalRecordUpdateOne) SetCreatedAt(t time.Time) *MedicalRecordUpdateOne {
	mruo.mutation.SetCreatedAt(t)
	return mruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillableCreatedAt(t *time.Time) *MedicalRecordUpdateOne {
	if t != nil {
		mruo.SetCreatedAt(*t)
	}
	return mruo
}

// SetUpdatedAt sets the "updated_at" field.
func (mruo *MedicalRecordUpdateOne) SetUpdatedAt(t time.Time) *MedicalRecordUpdateOne {
	mruo.mutation.SetUpdatedAt(t)
	return mruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillableUpdatedAt(t *time.Time) *MedicalRecordUpdateOne {
	if t != nil {
		mruo.SetUpdatedAt(*t)
	}
	return mruo
}

// SetArchivedAt sets the "archived_at" field.
func (mruo *MedicalRecordUpdateOne) SetArchivedAt(t time.Time) *MedicalRecordUpdateOne {
	mruo.mutation.SetArchivedAt(t)
	return mruo
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillableArchivedAt(t *time.Time) *MedicalRecordUpdateOne {
	if t != nil {
		mruo.SetArchivedAt(*t)
	}
	return mruo
}

// SetUser sets the "user" edge to the User entity.
func (mruo *MedicalRecordUpdateOne) SetUser(u *User) *MedicalRecordUpdateOne {
	return mruo.SetUserID(u.ID)
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (mruo *MedicalRecordUpdateOne) SetInstitution(i *Institution) *MedicalRecordUpdateOne {
	return mruo.SetInstitutionID(i.ID)
}

// AddRecordaccesIDs adds the "recordaccess" edge to the RecordAccess entity by IDs.
func (mruo *MedicalRecordUpdateOne) AddRecordaccesIDs(ids ...uuid.UUID) *MedicalRecordUpdateOne {
	mruo.mutation.AddRecordaccesIDs(ids...)
	return mruo
}

// AddRecordaccess adds the "recordaccess" edges to the RecordAccess entity.
func (mruo *MedicalRecordUpdateOne) AddRecordaccess(r ...*RecordAccess) *MedicalRecordUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mruo.AddRecordaccesIDs(ids...)
}

// Mutation returns the MedicalRecordMutation object of the builder.
func (mruo *MedicalRecordUpdateOne) Mutation() *MedicalRecordMutation {
	return mruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mruo *MedicalRecordUpdateOne) ClearUser() *MedicalRecordUpdateOne {
	mruo.mutation.ClearUser()
	return mruo
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (mruo *MedicalRecordUpdateOne) ClearInstitution() *MedicalRecordUpdateOne {
	mruo.mutation.ClearInstitution()
	return mruo
}

// ClearRecordaccess clears all "recordaccess" edges to the RecordAccess entity.
func (mruo *MedicalRecordUpdateOne) ClearRecordaccess() *MedicalRecordUpdateOne {
	mruo.mutation.ClearRecordaccess()
	return mruo
}

// RemoveRecordaccesIDs removes the "recordaccess" edge to RecordAccess entities by IDs.
func (mruo *MedicalRecordUpdateOne) RemoveRecordaccesIDs(ids ...uuid.UUID) *MedicalRecordUpdateOne {
	mruo.mutation.RemoveRecordaccesIDs(ids...)
	return mruo
}

// RemoveRecordaccess removes "recordaccess" edges to RecordAccess entities.
func (mruo *MedicalRecordUpdateOne) RemoveRecordaccess(r ...*RecordAccess) *MedicalRecordUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mruo.RemoveRecordaccesIDs(ids...)
}

// Where appends a list predicates to the MedicalRecordUpdate builder.
func (mruo *MedicalRecordUpdateOne) Where(ps ...predicate.MedicalRecord) *MedicalRecordUpdateOne {
	mruo.mutation.Where(ps...)
	return mruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mruo *MedicalRecordUpdateOne) Select(field string, fields ...string) *MedicalRecordUpdateOne {
	mruo.fields = append([]string{field}, fields...)
	return mruo
}

// Save executes the query and returns the updated MedicalRecord entity.
func (mruo *MedicalRecordUpdateOne) Save(ctx context.Context) (*MedicalRecord, error) {
	return withHooks(ctx, mruo.sqlSave, mruo.mutation, mruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mruo *MedicalRecordUpdateOne) SaveX(ctx context.Context) *MedicalRecord {
	node, err := mruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mruo *MedicalRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := mruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mruo *MedicalRecordUpdateOne) ExecX(ctx context.Context) {
	if err := mruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mruo *MedicalRecordUpdateOne) check() error {
	if mruo.mutation.UserCleared() && len(mruo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MedicalRecord.user"`)
	}
	return nil
}

func (mruo *MedicalRecordUpdateOne) sqlSave(ctx context.Context) (_node *MedicalRecord, err error) {
	if err := mruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(medicalrecord.Table, medicalrecord.Columns, sqlgraph.NewFieldSpec(medicalrecord.FieldID, field.TypeUUID))
	id, ok := mruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MedicalRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, medicalrecord.FieldID)
		for _, f := range fields {
			if !medicalrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != medicalrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mruo.mutation.File(); ok {
		_spec.SetField(medicalrecord.FieldFile, field.TypeString, value)
	}
	if value, ok := mruo.mutation.IsArchived(); ok {
		_spec.SetField(medicalrecord.FieldIsArchived, field.TypeBool, value)
	}
	if value, ok := mruo.mutation.CreatedAt(); ok {
		_spec.SetField(medicalrecord.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mruo.mutation.UpdatedAt(); ok {
		_spec.SetField(medicalrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mruo.mutation.ArchivedAt(); ok {
		_spec.SetField(medicalrecord.FieldArchivedAt, field.TypeTime, value)
	}
	if mruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalrecord.UserTable,
			Columns: []string{medicalrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalrecord.UserTable,
			Columns: []string{medicalrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mruo.mutation.InstitutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalrecord.InstitutionTable,
			Columns: []string{medicalrecord.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mruo.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalrecord.InstitutionTable,
			Columns: []string{medicalrecord.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mruo.mutation.RecordaccessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalrecord.RecordaccessTable,
			Columns: []string{medicalrecord.RecordaccessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recordaccess.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mruo.mutation.RemovedRecordaccessIDs(); len(nodes) > 0 && !mruo.mutation.RecordaccessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalrecord.RecordaccessTable,
			Columns: []string{medicalrecord.RecordaccessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recordaccess.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mruo.mutation.RecordaccessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalrecord.RecordaccessTable,
			Columns: []string{medicalrecord.RecordaccessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recordaccess.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MedicalRecord{config: mruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mruo.mutation.done = true
	return _node, nil
}
