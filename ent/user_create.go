// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/vector-ops/lifefolio/ent/institution"
	"github.com/vector-ops/lifefolio/ent/medicalrecord"
	"github.com/vector-ops/lifefolio/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetPatientID sets the "patient_id" field.
func (uc *UserCreate) SetPatientID(s string) *UserCreate {
	uc.mutation.SetPatientID(s)
	return uc
}

// SetFirstName sets the "first_name" field.
func (uc *UserCreate) SetFirstName(s string) *UserCreate {
	uc.mutation.SetFirstName(s)
	return uc
}

// SetLastName sets the "last_name" field.
func (uc *UserCreate) SetLastName(s string) *UserCreate {
	uc.mutation.SetLastName(s)
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetPassword sets the "password" field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetDOB sets the "DOB" field.
func (uc *UserCreate) SetDOB(t time.Time) *UserCreate {
	uc.mutation.SetDOB(t)
	return uc
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (uc *UserCreate) SetNillableDOB(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetDOB(*t)
	}
	return uc
}

// SetUserType sets the "user_type" field.
func (uc *UserCreate) SetUserType(ut user.UserType) *UserCreate {
	uc.mutation.SetUserType(ut)
	return uc
}

// SetNillableUserType sets the "user_type" field if the given value is not nil.
func (uc *UserCreate) SetNillableUserType(ut *user.UserType) *UserCreate {
	if ut != nil {
		uc.SetUserType(*ut)
	}
	return uc
}

// SetBloodGroup sets the "blood_group" field.
func (uc *UserCreate) SetBloodGroup(ug user.BloodGroup) *UserCreate {
	uc.mutation.SetBloodGroup(ug)
	return uc
}

// SetNillableBloodGroup sets the "blood_group" field if the given value is not nil.
func (uc *UserCreate) SetNillableBloodGroup(ug *user.BloodGroup) *UserCreate {
	if ug != nil {
		uc.SetBloodGroup(*ug)
	}
	return uc
}

// SetWeight sets the "weight" field.
func (uc *UserCreate) SetWeight(f float32) *UserCreate {
	uc.mutation.SetWeight(f)
	return uc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (uc *UserCreate) SetNillableWeight(f *float32) *UserCreate {
	if f != nil {
		uc.SetWeight(*f)
	}
	return uc
}

// SetHeight sets the "height" field.
func (uc *UserCreate) SetHeight(f float32) *UserCreate {
	uc.mutation.SetHeight(f)
	return uc
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (uc *UserCreate) SetNillableHeight(f *float32) *UserCreate {
	if f != nil {
		uc.SetHeight(*f)
	}
	return uc
}

// SetIsArchived sets the "is_archived" field.
func (uc *UserCreate) SetIsArchived(b bool) *UserCreate {
	uc.mutation.SetIsArchived(b)
	return uc
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsArchived(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsArchived(*b)
	}
	return uc
}

// SetIsVerified sets the "is_verified" field.
func (uc *UserCreate) SetIsVerified(b bool) *UserCreate {
	uc.mutation.SetIsVerified(b)
	return uc
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsVerified(*b)
	}
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetArchivedAt sets the "archived_at" field.
func (uc *UserCreate) SetArchivedAt(t time.Time) *UserCreate {
	uc.mutation.SetArchivedAt(t)
	return uc
}

// SetVerifiedAt sets the "verified_at" field.
func (uc *UserCreate) SetVerifiedAt(t time.Time) *UserCreate {
	uc.mutation.SetVerifiedAt(t)
	return uc
}

// SetOtp sets the "otp" field.
func (uc *UserCreate) SetOtp(u uint64) *UserCreate {
	uc.mutation.SetOtp(u)
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(u uuid.UUID) *UserCreate {
	uc.mutation.SetID(u)
	return uc
}

// AddMedicalrecordIDs adds the "medicalrecord" edge to the MedicalRecord entity by IDs.
func (uc *UserCreate) AddMedicalrecordIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddMedicalrecordIDs(ids...)
	return uc
}

// AddMedicalrecord adds the "medicalrecord" edges to the MedicalRecord entity.
func (uc *UserCreate) AddMedicalrecord(m ...*MedicalRecord) *UserCreate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uc.AddMedicalrecordIDs(ids...)
}

// SetInstitutionID sets the "institution" edge to the Institution entity by ID.
func (uc *UserCreate) SetInstitutionID(id uuid.UUID) *UserCreate {
	uc.mutation.SetInstitutionID(id)
	return uc
}

// SetNillableInstitutionID sets the "institution" edge to the Institution entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableInstitutionID(id *uuid.UUID) *UserCreate {
	if id != nil {
		uc = uc.SetInstitutionID(*id)
	}
	return uc
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (uc *UserCreate) SetInstitution(i *Institution) *UserCreate {
	return uc.SetInstitutionID(i.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.UserType(); !ok {
		v := user.DefaultUserType
		uc.mutation.SetUserType(v)
	}
	if _, ok := uc.mutation.IsArchived(); !ok {
		v := user.DefaultIsArchived
		uc.mutation.SetIsArchived(v)
	}
	if _, ok := uc.mutation.IsVerified(); !ok {
		v := user.DefaultIsVerified
		uc.mutation.SetIsVerified(v)
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.PatientID(); !ok {
		return &ValidationError{Name: "patient_id", err: errors.New(`ent: missing required field "User.patient_id"`)}
	}
	if v, ok := uc.mutation.PatientID(); ok {
		if err := user.PatientIDValidator(v); err != nil {
			return &ValidationError{Name: "patient_id", err: fmt.Errorf(`ent: validator failed for field "User.patient_id": %w`, err)}
		}
	}
	if _, ok := uc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "User.first_name"`)}
	}
	if v, ok := uc.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if _, ok := uc.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "User.last_name"`)}
	}
	if v, ok := uc.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if v, ok := uc.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "User.password"`)}
	}
	if v, ok := uc.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	if _, ok := uc.mutation.UserType(); !ok {
		return &ValidationError{Name: "user_type", err: errors.New(`ent: missing required field "User.user_type"`)}
	}
	if v, ok := uc.mutation.UserType(); ok {
		if err := user.UserTypeValidator(v); err != nil {
			return &ValidationError{Name: "user_type", err: fmt.Errorf(`ent: validator failed for field "User.user_type": %w`, err)}
		}
	}
	if v, ok := uc.mutation.BloodGroup(); ok {
		if err := user.BloodGroupValidator(v); err != nil {
			return &ValidationError{Name: "blood_group", err: fmt.Errorf(`ent: validator failed for field "User.blood_group": %w`, err)}
		}
	}
	if _, ok := uc.mutation.IsArchived(); !ok {
		return &ValidationError{Name: "is_archived", err: errors.New(`ent: missing required field "User.is_archived"`)}
	}
	if _, ok := uc.mutation.IsVerified(); !ok {
		return &ValidationError{Name: "is_verified", err: errors.New(`ent: missing required field "User.is_verified"`)}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	if _, ok := uc.mutation.ArchivedAt(); !ok {
		return &ValidationError{Name: "archived_at", err: errors.New(`ent: missing required field "User.archived_at"`)}
	}
	if _, ok := uc.mutation.VerifiedAt(); !ok {
		return &ValidationError{Name: "verified_at", err: errors.New(`ent: missing required field "User.verified_at"`)}
	}
	if _, ok := uc.mutation.Otp(); !ok {
		return &ValidationError{Name: "otp", err: errors.New(`ent: missing required field "User.otp"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uc.mutation.PatientID(); ok {
		_spec.SetField(user.FieldPatientID, field.TypeString, value)
		_node.PatientID = value
	}
	if value, ok := uc.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := uc.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := uc.mutation.DOB(); ok {
		_spec.SetField(user.FieldDOB, field.TypeTime, value)
		_node.DOB = value
	}
	if value, ok := uc.mutation.UserType(); ok {
		_spec.SetField(user.FieldUserType, field.TypeEnum, value)
		_node.UserType = value
	}
	if value, ok := uc.mutation.BloodGroup(); ok {
		_spec.SetField(user.FieldBloodGroup, field.TypeEnum, value)
		_node.BloodGroup = value
	}
	if value, ok := uc.mutation.Weight(); ok {
		_spec.SetField(user.FieldWeight, field.TypeFloat32, value)
		_node.Weight = value
	}
	if value, ok := uc.mutation.Height(); ok {
		_spec.SetField(user.FieldHeight, field.TypeFloat32, value)
		_node.Height = value
	}
	if value, ok := uc.mutation.IsArchived(); ok {
		_spec.SetField(user.FieldIsArchived, field.TypeBool, value)
		_node.IsArchived = value
	}
	if value, ok := uc.mutation.IsVerified(); ok {
		_spec.SetField(user.FieldIsVerified, field.TypeBool, value)
		_node.IsVerified = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.ArchivedAt(); ok {
		_spec.SetField(user.FieldArchivedAt, field.TypeTime, value)
		_node.ArchivedAt = &value
	}
	if value, ok := uc.mutation.VerifiedAt(); ok {
		_spec.SetField(user.FieldVerifiedAt, field.TypeTime, value)
		_node.VerifiedAt = &value
	}
	if value, ok := uc.mutation.Otp(); ok {
		_spec.SetField(user.FieldOtp, field.TypeUint64, value)
		_node.Otp = &value
	}
	if nodes := uc.mutation.MedicalrecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MedicalrecordTable,
			Columns: []string{user.MedicalrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.InstitutionTable,
			Columns: []string{user.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.institution_doctor = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
