// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/vector-ops/lifefolio/ent/institution"
	"github.com/vector-ops/lifefolio/ent/medicalrecord"
	"github.com/vector-ops/lifefolio/ent/predicate"
	"github.com/vector-ops/lifefolio/ent/recordaccess"
)

// RecordAccessUpdate is the builder for updating RecordAccess entities.
type RecordAccessUpdate struct {
	config
	hooks    []Hook
	mutation *RecordAccessMutation
}

// Where appends a list predicates to the RecordAccessUpdate builder.
func (rau *RecordAccessUpdate) Where(ps ...predicate.RecordAccess) *RecordAccessUpdate {
	rau.mutation.Where(ps...)
	return rau
}

// SetApproved sets the "approved" field.
func (rau *RecordAccessUpdate) SetApproved(b bool) *RecordAccessUpdate {
	rau.mutation.SetApproved(b)
	return rau
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (rau *RecordAccessUpdate) SetNillableApproved(b *bool) *RecordAccessUpdate {
	if b != nil {
		rau.SetApproved(*b)
	}
	return rau
}

// SetApprovedAt sets the "approved_at" field.
func (rau *RecordAccessUpdate) SetApprovedAt(t time.Time) *RecordAccessUpdate {
	rau.mutation.SetApprovedAt(t)
	return rau
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (rau *RecordAccessUpdate) SetNillableApprovedAt(t *time.Time) *RecordAccessUpdate {
	if t != nil {
		rau.SetApprovedAt(*t)
	}
	return rau
}

// SetMedicalrecordID sets the "medicalrecord" edge to the MedicalRecord entity by ID.
func (rau *RecordAccessUpdate) SetMedicalrecordID(id uuid.UUID) *RecordAccessUpdate {
	rau.mutation.SetMedicalrecordID(id)
	return rau
}

// SetNillableMedicalrecordID sets the "medicalrecord" edge to the MedicalRecord entity by ID if the given value is not nil.
func (rau *RecordAccessUpdate) SetNillableMedicalrecordID(id *uuid.UUID) *RecordAccessUpdate {
	if id != nil {
		rau = rau.SetMedicalrecordID(*id)
	}
	return rau
}

// SetMedicalrecord sets the "medicalrecord" edge to the MedicalRecord entity.
func (rau *RecordAccessUpdate) SetMedicalrecord(m *MedicalRecord) *RecordAccessUpdate {
	return rau.SetMedicalrecordID(m.ID)
}

// SetInstitutionID sets the "institution" edge to the Institution entity by ID.
func (rau *RecordAccessUpdate) SetInstitutionID(id uuid.UUID) *RecordAccessUpdate {
	rau.mutation.SetInstitutionID(id)
	return rau
}

// SetNillableInstitutionID sets the "institution" edge to the Institution entity by ID if the given value is not nil.
func (rau *RecordAccessUpdate) SetNillableInstitutionID(id *uuid.UUID) *RecordAccessUpdate {
	if id != nil {
		rau = rau.SetInstitutionID(*id)
	}
	return rau
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (rau *RecordAccessUpdate) SetInstitution(i *Institution) *RecordAccessUpdate {
	return rau.SetInstitutionID(i.ID)
}

// Mutation returns the RecordAccessMutation object of the builder.
func (rau *RecordAccessUpdate) Mutation() *RecordAccessMutation {
	return rau.mutation
}

// ClearMedicalrecord clears the "medicalrecord" edge to the MedicalRecord entity.
func (rau *RecordAccessUpdate) ClearMedicalrecord() *RecordAccessUpdate {
	rau.mutation.ClearMedicalrecord()
	return rau
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (rau *RecordAccessUpdate) ClearInstitution() *RecordAccessUpdate {
	rau.mutation.ClearInstitution()
	return rau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rau *RecordAccessUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rau.sqlSave, rau.mutation, rau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rau *RecordAccessUpdate) SaveX(ctx context.Context) int {
	affected, err := rau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rau *RecordAccessUpdate) Exec(ctx context.Context) error {
	_, err := rau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rau *RecordAccessUpdate) ExecX(ctx context.Context) {
	if err := rau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rau *RecordAccessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(recordaccess.Table, recordaccess.Columns, sqlgraph.NewFieldSpec(recordaccess.FieldID, field.TypeUUID))
	if ps := rau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rau.mutation.Approved(); ok {
		_spec.SetField(recordaccess.FieldApproved, field.TypeBool, value)
	}
	if value, ok := rau.mutation.ApprovedAt(); ok {
		_spec.SetField(recordaccess.FieldApprovedAt, field.TypeTime, value)
	}
	if rau.mutation.MedicalrecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordaccess.MedicalrecordTable,
			Columns: []string{recordaccess.MedicalrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalrecord.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rau.mutation.MedicalrecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordaccess.MedicalrecordTable,
			Columns: []string{recordaccess.MedicalrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rau.mutation.InstitutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordaccess.InstitutionTable,
			Columns: []string{recordaccess.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rau.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordaccess.InstitutionTable,
			Columns: []string{recordaccess.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recordaccess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rau.mutation.done = true
	return n, nil
}

// RecordAccessUpdateOne is the builder for updating a single RecordAccess entity.
type RecordAccessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecordAccessMutation
}

// SetApproved sets the "approved" field.
func (rauo *RecordAccessUpdateOne) SetApproved(b bool) *RecordAccessUpdateOne {
	rauo.mutation.SetApproved(b)
	return rauo
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (rauo *RecordAccessUpdateOne) SetNillableApproved(b *bool) *RecordAccessUpdateOne {
	if b != nil {
		rauo.SetApproved(*b)
	}
	return rauo
}

// SetApprovedAt sets the "approved_at" field.
func (rauo *RecordAccessUpdateOne) SetApprovedAt(t time.Time) *RecordAccessUpdateOne {
	rauo.mutation.SetApprovedAt(t)
	return rauo
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (rauo *RecordAccessUpdateOne) SetNillableApprovedAt(t *time.Time) *RecordAccessUpdateOne {
	if t != nil {
		rauo.SetApprovedAt(*t)
	}
	return rauo
}

// SetMedicalrecordID sets the "medicalrecord" edge to the MedicalRecord entity by ID.
func (rauo *RecordAccessUpdateOne) SetMedicalrecordID(id uuid.UUID) *RecordAccessUpdateOne {
	rauo.mutation.SetMedicalrecordID(id)
	return rauo
}

// SetNillableMedicalrecordID sets the "medicalrecord" edge to the MedicalRecord entity by ID if the given value is not nil.
func (rauo *RecordAccessUpdateOne) SetNillableMedicalrecordID(id *uuid.UUID) *RecordAccessUpdateOne {
	if id != nil {
		rauo = rauo.SetMedicalrecordID(*id)
	}
	return rauo
}

// SetMedicalrecord sets the "medicalrecord" edge to the MedicalRecord entity.
func (rauo *RecordAccessUpdateOne) SetMedicalrecord(m *MedicalRecord) *RecordAccessUpdateOne {
	return rauo.SetMedicalrecordID(m.ID)
}

// SetInstitutionID sets the "institution" edge to the Institution entity by ID.
func (rauo *RecordAccessUpdateOne) SetInstitutionID(id uuid.UUID) *RecordAccessUpdateOne {
	rauo.mutation.SetInstitutionID(id)
	return rauo
}

// SetNillableInstitutionID sets the "institution" edge to the Institution entity by ID if the given value is not nil.
func (rauo *RecordAccessUpdateOne) SetNillableInstitutionID(id *uuid.UUID) *RecordAccessUpdateOne {
	if id != nil {
		rauo = rauo.SetInstitutionID(*id)
	}
	return rauo
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (rauo *RecordAccessUpdateOne) SetInstitution(i *Institution) *RecordAccessUpdateOne {
	return rauo.SetInstitutionID(i.ID)
}

// Mutation returns the RecordAccessMutation object of the builder.
func (rauo *RecordAccessUpdateOne) Mutation() *RecordAccessMutation {
	return rauo.mutation
}

// ClearMedicalrecord clears the "medicalrecord" edge to the MedicalRecord entity.
func (rauo *RecordAccessUpdateOne) ClearMedicalrecord() *RecordAccessUpdateOne {
	rauo.mutation.ClearMedicalrecord()
	return rauo
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (rauo *RecordAccessUpdateOne) ClearInstitution() *RecordAccessUpdateOne {
	rauo.mutation.ClearInstitution()
	return rauo
}

// Where appends a list predicates to the RecordAccessUpdate builder.
func (rauo *RecordAccessUpdateOne) Where(ps ...predicate.RecordAccess) *RecordAccessUpdateOne {
	rauo.mutation.Where(ps...)
	return rauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rauo *RecordAccessUpdateOne) Select(field string, fields ...string) *RecordAccessUpdateOne {
	rauo.fields = append([]string{field}, fields...)
	return rauo
}

// Save executes the query and returns the updated RecordAccess entity.
func (rauo *RecordAccessUpdateOne) Save(ctx context.Context) (*RecordAccess, error) {
	return withHooks(ctx, rauo.sqlSave, rauo.mutation, rauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rauo *RecordAccessUpdateOne) SaveX(ctx context.Context) *RecordAccess {
	node, err := rauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rauo *RecordAccessUpdateOne) Exec(ctx context.Context) error {
	_, err := rauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rauo *RecordAccessUpdateOne) ExecX(ctx context.Context) {
	if err := rauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rauo *RecordAccessUpdateOne) sqlSave(ctx context.Context) (_node *RecordAccess, err error) {
	_spec := sqlgraph.NewUpdateSpec(recordaccess.Table, recordaccess.Columns, sqlgraph.NewFieldSpec(recordaccess.FieldID, field.TypeUUID))
	id, ok := rauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RecordAccess.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recordaccess.FieldID)
		for _, f := range fields {
			if !recordaccess.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recordaccess.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rauo.mutation.Approved(); ok {
		_spec.SetField(recordaccess.FieldApproved, field.TypeBool, value)
	}
	if value, ok := rauo.mutation.ApprovedAt(); ok {
		_spec.SetField(recordaccess.FieldApprovedAt, field.TypeTime, value)
	}
	if rauo.mutation.MedicalrecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordaccess.MedicalrecordTable,
			Columns: []string{recordaccess.MedicalrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalrecord.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rauo.mutation.MedicalrecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordaccess.MedicalrecordTable,
			Columns: []string{recordaccess.MedicalrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rauo.mutation.InstitutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordaccess.InstitutionTable,
			Columns: []string{recordaccess.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rauo.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordaccess.InstitutionTable,
			Columns: []string{recordaccess.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RecordAccess{config: rauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recordaccess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rauo.mutation.done = true
	return _node, nil
}
