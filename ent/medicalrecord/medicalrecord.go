// Code generated by ent, DO NOT EDIT.

package medicalrecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the medicalrecord type in the database.
	Label = "medical_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFile holds the string denoting the file field in the database.
	FieldFile = "file"
	// FieldIsArchived holds the string denoting the is_archived field in the database.
	FieldIsArchived = "is_archived"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldArchivedAt holds the string denoting the archived_at field in the database.
	FieldArchivedAt = "archived_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeInstitution holds the string denoting the institution edge name in mutations.
	EdgeInstitution = "institution"
	// EdgeRecordaccess holds the string denoting the recordaccess edge name in mutations.
	EdgeRecordaccess = "recordaccess"
	// Table holds the table name of the medicalrecord in the database.
	Table = "medical_records"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "medical_records"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_medicalrecord"
	// InstitutionTable is the table that holds the institution relation/edge.
	InstitutionTable = "medical_records"
	// InstitutionInverseTable is the table name for the Institution entity.
	// It exists in this package in order to avoid circular dependency with the "institution" package.
	InstitutionInverseTable = "institutions"
	// InstitutionColumn is the table column denoting the institution relation/edge.
	InstitutionColumn = "institution_medicalrecord"
	// RecordaccessTable is the table that holds the recordaccess relation/edge.
	RecordaccessTable = "record_accesses"
	// RecordaccessInverseTable is the table name for the RecordAccess entity.
	// It exists in this package in order to avoid circular dependency with the "recordaccess" package.
	RecordaccessInverseTable = "record_accesses"
	// RecordaccessColumn is the table column denoting the recordaccess relation/edge.
	RecordaccessColumn = "medical_record_recordaccess"
)

// Columns holds all SQL columns for medicalrecord fields.
var Columns = []string{
	FieldID,
	FieldFile,
	FieldIsArchived,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldArchivedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "medical_records"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"institution_medicalrecord",
	"user_medicalrecord",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsArchived holds the default value on creation for the "is_archived" field.
	DefaultIsArchived bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the MedicalRecord queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFile orders the results by the file field.
func ByFile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFile, opts...).ToFunc()
}

// ByIsArchived orders the results by the is_archived field.
func ByIsArchived(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsArchived, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByArchivedAt orders the results by the archived_at field.
func ByArchivedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchivedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByInstitutionField orders the results by institution field.
func ByInstitutionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInstitutionStep(), sql.OrderByField(field, opts...))
	}
}

// ByRecordaccessCount orders the results by recordaccess count.
func ByRecordaccessCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecordaccessStep(), opts...)
	}
}

// ByRecordaccess orders the results by recordaccess terms.
func ByRecordaccess(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecordaccessStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newInstitutionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InstitutionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InstitutionTable, InstitutionColumn),
	)
}
func newRecordaccessStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecordaccessInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RecordaccessTable, RecordaccessColumn),
	)
}
